import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
var _SfDate;
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.string.match.js";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
/**
 *
 */
import { zeroPad } from './util/formatter';

/** @private **/
function createLiteralBuilder(literal) {
  return function (num) {
    var _context;
    return new SfDate(_concatInstanceProperty(_context = "".concat(literal, ":")).call(_context, String(num)));
  }; // eslint-disable-line no-use-before-define
}

/**
 * A date object to keep Salesforce date literal
 *
 * @class
 * @constructor
 * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
 */
export var SfDate = /*#__PURE__*/function () {
  /**
   *
   */
  function SfDate(literal) {
    _classCallCheck(this, SfDate);
    _defineProperty(this, "toString", this.toJSON);
    this._literal = literal;
  }

  /**
   * Returns literal when converted to string
   */
  return _createClass(SfDate, [{
    key: "toJSON",
    value: function toJSON() {
      return this._literal;
    }
  }], [{
    key: "toDateLiteral",
    value:
    /**
     * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
     *
     * @param {String|Number|Date} date - Input date
     * @returns {SfDate} - Salesforce date literal with ISO8601 date format
     */
    function toDateLiteral(date) {
      var _date;
      if (typeof date === 'number') {
        _date = new Date(date);
      } else if (typeof date === 'string') {
        _date = SfDate.parseDate(date);
      } else {
        _date = date;
      }
      var yy = _date.getFullYear();
      var mm = _date.getMonth() + 1;
      var dd = _date.getDate();
      var dstr = [yy, zeroPad(mm), zeroPad(dd)].join('-');
      return new SfDate(dstr);
    }

    /**
     * Convert JavaScript date object to ISO8601 DateTime format
     * (e.g. 2012-10-31T12:34:56Z)
     */
  }, {
    key: "toDateTimeLiteral",
    value: function toDateTimeLiteral(date) {
      var _context2;
      var _date;
      if (typeof date === 'number') {
        _date = new Date(date);
      } else if (typeof date === 'string') {
        _date = SfDate.parseDate(date);
      } else {
        _date = date;
      }
      var yy = _date.getUTCFullYear();
      var mm = _date.getUTCMonth() + 1;
      var dd = _date.getUTCDate();
      var hh = _date.getUTCHours();
      var mi = _date.getUTCMinutes();
      var ss = _date.getUTCSeconds();
      var dtstr = _concatInstanceProperty(_context2 = "".concat([yy, zeroPad(mm), zeroPad(dd)].join('-'), "T")).call(_context2, [zeroPad(hh), zeroPad(mi), zeroPad(ss)].join(':'), "Z");
      return new SfDate(dtstr);
    }

    /**
     * Convert JavaScript date object to ISO8601 time format
     * (e.g. 12:34:56.789Z)
     */
  }, {
    key: "toTimeLiteral",
    value: function toTimeLiteral(time) {
      var _context3, _context4, _context5;
      var _date = new Date(0);
      if (typeof time === 'string') {
        _date = SfDate.parseTime(time);
      } else if (typeof time === 'number') {
        _date = new Date(time);
      } else {
        _date = time;
      }
      var hh = _date.getUTCHours();
      var mi = _date.getUTCMinutes();
      var ss = _date.getUTCSeconds();
      var sss = _date.getUTCMilliseconds();
      var tstr = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "".concat(zeroPad(hh), ":")).call(_context5, zeroPad(mi), ":")).call(_context4, zeroPad(ss), ".")).call(_context3, zeroPad(sss, 3), "Z");
      return new SfDate(tstr);
    }

    /**
     * Parse IS08601 date(time) formatted string and return date instance
     */
  }, {
    key: "parseDate",
    value: function parseDate(str) {
      var d = new Date();
      var regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([+-])([\d]{2}):?([\d]{2})))?$/;
      var m = str.match(regexp);
      if (m) {
        d = new Date(0);
        if (!m[4]) {
          d.setFullYear(_parseInt(m[1], 10));
          d.setDate(_parseInt(m[3], 10));
          d.setMonth(_parseInt(m[2], 10) - 1);
          d.setHours(0);
          d.setMinutes(0);
          d.setSeconds(0);
          d.setMilliseconds(0);
        } else {
          d.setUTCFullYear(_parseInt(m[1], 10));
          d.setUTCDate(_parseInt(m[3], 10));
          d.setUTCMonth(_parseInt(m[2], 10) - 1);
          d.setUTCHours(_parseInt(m[5], 10));
          d.setUTCMinutes(_parseInt(m[6], 10));
          d.setUTCSeconds(_parseInt(m[7], 10));
          d.setUTCMilliseconds(_parseInt(m[9] || '0', 10));
          if (m[10] && m[10] !== 'Z') {
            var offset = _parseInt(m[12], 10) * 60 + _parseInt(m[13], 10);
            d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 + d.getTime());
          }
        }
        return d;
      }
      throw new Error("Invalid date format is specified : ".concat(str));
    }

    /**
     * Parse IS08601 time formatted string and convert to parse string
     */
  }, {
    key: "parseTime",
    value: function parseTime(str) {
      var regexp = /^([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?Z?$/;
      var m = str.match(regexp);
      if (m) {
        var d = new Date(0);
        var hh = _parseInt(m[1], 10);
        var mi = _parseInt(m[2], 10);
        var ss = _parseInt(m[3], 10);
        var sss = _parseInt(m[5] || '0', 10);
        d.setUTCHours(hh);
        d.setUTCMinutes(mi);
        d.setUTCSeconds(ss);
        d.setUTCMilliseconds(sss);
        return d;
      }
      throw new Error("Invalid time format is specified : ".concat(str));
    }
  }]);
}();
_SfDate = SfDate;
_defineProperty(SfDate, "YESTERDAY", new _SfDate('YESTERDAY'));
_defineProperty(SfDate, "TODAY", new _SfDate('TODAY'));
_defineProperty(SfDate, "TOMORROW", new _SfDate('TOMORROW'));
_defineProperty(SfDate, "LAST_WEEK", new _SfDate('LAST_WEEK'));
_defineProperty(SfDate, "THIS_WEEK", new _SfDate('THIS_WEEK'));
_defineProperty(SfDate, "NEXT_WEEK", new _SfDate('NEXT_WEEK'));
_defineProperty(SfDate, "LAST_MONTH", new _SfDate('LAST_MONTH'));
_defineProperty(SfDate, "THIS_MONTH", new _SfDate('THIS_MONTH'));
_defineProperty(SfDate, "NEXT_MONTH", new _SfDate('NEXT_MONTH'));
_defineProperty(SfDate, "LAST_90_DAYS", new _SfDate('LAST_90_DAYS'));
_defineProperty(SfDate, "NEXT_90_DAYS", new _SfDate('NEXT_90_DAYS'));
_defineProperty(SfDate, "LAST_N_DAYS", createLiteralBuilder('LAST_N_DAYS'));
_defineProperty(SfDate, "NEXT_N_DAYS", createLiteralBuilder('NEXT_N_DAYS'));
_defineProperty(SfDate, "NEXT_N_WEEKS", createLiteralBuilder('NEXT_N_WEEKS'));
_defineProperty(SfDate, "LAST_N_WEEKS", createLiteralBuilder('LAST_N_WEEKS'));
_defineProperty(SfDate, "NEXT_N_MONTHS", createLiteralBuilder('NEXT_N_MONTHS'));
_defineProperty(SfDate, "LAST_N_MONTHS", createLiteralBuilder('LAST_N_MONTHS'));
_defineProperty(SfDate, "THIS_QUARTER", new _SfDate('THIS_QUARTER'));
_defineProperty(SfDate, "LAST_QUARTER", new _SfDate('LAST_QUARTER'));
_defineProperty(SfDate, "NEXT_QUARTER", new _SfDate('NEXT_QUARTER'));
_defineProperty(SfDate, "NEXT_N_QUARTERS", createLiteralBuilder('NEXT_N_QUARTERS'));
_defineProperty(SfDate, "LAST_N_QUARTERS", createLiteralBuilder('LAST_N_QUARTERS'));
_defineProperty(SfDate, "THIS_YEAR", new _SfDate('THIS_YEAR'));
_defineProperty(SfDate, "LAST_YEAR", new _SfDate('LAST_YEAR'));
_defineProperty(SfDate, "NEXT_YEAR", new _SfDate('NEXT_YEAR'));
_defineProperty(SfDate, "NEXT_N_YEARS", createLiteralBuilder('NEXT_N_YEARS'));
_defineProperty(SfDate, "LAST_N_YEARS", createLiteralBuilder('LAST_N_YEARS'));
_defineProperty(SfDate, "THIS_FISCAL_QUARTER", new _SfDate('THIS_FISCAL_QUARTER'));
_defineProperty(SfDate, "LAST_FISCAL_QUARTER", new _SfDate('LAST_FISCAL_QUARTER'));
_defineProperty(SfDate, "NEXT_FISCAL_QUARTER", new _SfDate('NEXT_FISCAL_QUARTER'));
_defineProperty(SfDate, "THIS_FISCAL_YEAR", new _SfDate('THIS_FISCAL_YEAR'));
_defineProperty(SfDate, "NEXT_N_FISCAL_QUARTERS", createLiteralBuilder('NEXT_N_FISCAL_QUARTERS'));
_defineProperty(SfDate, "LAST_N_FISCAL_QUARTERS", createLiteralBuilder('LAST_N_FISCAL_QUARTERS'));
_defineProperty(SfDate, "LAST_FISCAL_YEAR", new _SfDate('LAST_FISCAL_YEAR'));
_defineProperty(SfDate, "NEXT_FISCAL_YEAR", new _SfDate('NEXT_FISCAL_YEAR'));
_defineProperty(SfDate, "NEXT_N_FISCAL_YEARS", createLiteralBuilder('NEXT_N_FISCAL_YEARS'));
_defineProperty(SfDate, "LAST_N_FISCAL_YEARS", createLiteralBuilder('LAST_N_FISCAL_YEARS'));
export default SfDate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,