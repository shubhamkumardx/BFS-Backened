import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Reflect$construct from "@babel/runtime-corejs3/core-js-stable/reflect/construct";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime-corejs3/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime-corejs3/helpers/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/inherits";
import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
var _excluded = ["fields", "includes", "sort"],
  _excluded2 = ["conditions", "fields"];
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { var _context37; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context37 = Object.prototype.toString.call(o)).call(_context37, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import "core-js/modules/es.error.cause.js";
import "core-js/modules/es.array.includes.js";
import "core-js/modules/es.array.join.js";
import "core-js/modules/es.array.push.js";
import "core-js/modules/es.array.sort.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.regexp.test.js";
import "core-js/modules/es.regexp.to-string.js";
import "core-js/modules/es.string.includes.js";
import "core-js/modules/es.string.split.js";
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? _Reflect$construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context35, _context36; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context35 = ownKeys(Object(t), !0)).call(_context35, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context36 = ownKeys(Object(t))).call(_context36, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _sortInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/sort";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _JSON$stringify from "@babel/runtime-corejs3/core-js-stable/json/stringify";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$entries from "@babel/runtime-corejs3/core-js-stable/object/entries";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
/**
 * @file Manages query for records in Salesforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
import { EventEmitter } from 'events';
import { getLogger } from './util/logger';
import RecordStream, { Serializable } from './record-stream';
import { createSOQL } from './soql-builder';

/**
 *
 */

/**
 *
 */

/**
 *
 */

var ResponseTargetValues = ['QueryResult', 'Records', 'SingleRecord', 'Count'];
export var ResponseTargets = _reduceInstanceProperty(ResponseTargetValues).call(ResponseTargetValues, function (values, target) {
  return _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, target, target));
}, {});

// QRT extends 'Count'

/**
 *
 */
var DEFAULT_BULK_THRESHOLD = 200;
var DEFAULT_BULK_API_VERSION = 1;

/**
 * Query
 */
export var Query = /*#__PURE__*/function (_EventEmitter) {
  /**
   *
   */
  function Query(conn, config, options) {
    var _this;
    _classCallCheck(this, Query);
    _this = _callSuper(this, Query);
    _defineProperty(_this, "_config", {});
    _defineProperty(_this, "_children", []);
    _defineProperty(_this, "_executed", false);
    _defineProperty(_this, "_finished", false);
    _defineProperty(_this, "_chaining", false);
    _defineProperty(_this, "totalSize", 0);
    _defineProperty(_this, "totalFetched", 0);
    _defineProperty(_this, "records", []);
    /**
     * Synonym of Query#skip()
     */
    _defineProperty(_this, "offset", _this.skip);
    /**
     * Synonym of Query#sort()
     */
    _defineProperty(_this, "orderby", _sortInstanceProperty(_this));
    /**
     * Synonym of Query#execute()
     */
    _defineProperty(_this, "exec", _this.execute);
    /**
     * Synonym of Query#execute()
     */
    _defineProperty(_this, "run", _this.execute);
    /**
     * Synonym of Query#destroy()
     */
    _defineProperty(_this, "delete", _this.destroy);
    /**
     * Synonym of Query#destroy()
     */
    _defineProperty(_this, "del", _this.destroy);
    _this._conn = conn;
    _this._logger = conn._logLevel ? Query._logger.createInstance(conn._logLevel) : Query._logger;
    if (typeof config === 'string') {
      _this._soql = config;
      _this._logger.debug("config is soql: ".concat(config));
    } else if (typeof config.locator === 'string') {
      var locator = config.locator;
      _this._logger.debug("config is locator: ".concat(locator));
      _this._locator = _includesInstanceProperty(locator).call(locator, '/') ? _this.urlToLocator(locator) : locator;
    } else {
      _this._logger.debug("config is QueryConfig: ".concat(_JSON$stringify(config)));
      var _ref = config,
        _fields = _ref.fields,
        includes = _includesInstanceProperty(_ref),
        _sort2 = _sortInstanceProperty(_ref),
        _config = _objectWithoutProperties(_ref, _excluded);
      _this._config = _config;
      _this.select(_fields);
      if (includes) {
        _this.includeChildren(includes);
      }
      if (_sort2) {
        _sortInstanceProperty(_this).call(_this, _sort2);
      }
    }
    _this._options = _objectSpread({
      headers: {},
      maxFetch: 10000,
      autoFetch: false,
      scanAll: false,
      responseTarget: 'QueryResult'
    }, options || {});
    // promise instance
    _this._promise = new _Promise(function (resolve, reject) {
      _this.on('response', resolve);
      _this.on('error', reject);
    });
    _this._stream = new Serializable();
    _this.on('record', function (record) {
      return _this._stream.push(record);
    });
    _this.on('end', function () {
      return _this._stream.push(null);
    });
    _this.on('error', function (err) {
      try {
        _this._stream.emit('error', err);
      } catch (e) {
        // eslint-disable-line no-empty
      }
    });
    return _this;
  }

  /**
   * Select fields to include in the returning result
   */
  _inherits(Query, _EventEmitter);
  return _createClass(Query, [{
    key: "select",
    value: function select() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';
      if (this._soql) {
        throw Error('Cannot set select fields for the query which has already built SOQL.');
      }
      function toFieldArray(fields) {
        var _context, _context2, _context4, _context5;
        return typeof fields === 'string' ? fields.split(/\s*,\s*/) : _Array$isArray(fields) ? _reduceInstanceProperty(_context = _mapInstanceProperty(_context2 = fields).call(_context2, toFieldArray)).call(_context, function (fs, f) {
          var _context3;
          return _concatInstanceProperty(_context3 = []).call(_context3, _toConsumableArray(fs), _toConsumableArray(f));
        }, []) : _reduceInstanceProperty(_context4 = _mapInstanceProperty(_context5 = _Object$entries(fields)).call(_context5, function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            f = _ref3[0],
            v = _ref3[1];
          if (typeof v === 'number' || typeof v === 'boolean') {
            return v ? [f] : [];
          } else {
            var _context6;
            return _mapInstanceProperty(_context6 = toFieldArray(v)).call(_context6, function (p) {
              var _context7;
              return _concatInstanceProperty(_context7 = "".concat(f, ".")).call(_context7, p);
            });
          }
        })).call(_context4, function (fs, f) {
          var _context8;
          return _concatInstanceProperty(_context8 = []).call(_context8, _toConsumableArray(fs), _toConsumableArray(f));
        }, []);
      }
      if (fields) {
        this._config.fields = toFieldArray(fields);
      }
      // force convert query record type without changing instance;
      return this;
    }

    /**
     * Set query conditions to filter the result records
     */
  }, {
    key: "where",
    value: function where(conditions) {
      if (this._soql) {
        throw Error('Cannot set where conditions for the query which has already built SOQL.');
      }
      this._config.conditions = conditions;
      return this;
    }

    /**
     * Limit the returning result
     */
  }, {
    key: "limit",
    value: function limit(_limit) {
      if (this._soql) {
        throw Error('Cannot set limit for the query which has already built SOQL.');
      }
      this._config.limit = _limit;
      return this;
    }

    /**
     * Skip records
     */
  }, {
    key: "skip",
    value: function skip(offset) {
      if (this._soql) {
        throw Error('Cannot set skip/offset for the query which has already built SOQL.');
      }
      this._config.offset = offset;
      return this;
    }
  }, {
    key: "sort",
    value: function (_sort) {
      function sort(_x, _x2) {
        return _sort.apply(this, arguments);
      }
      sort.toString = function () {
        return _sort.toString();
      };
      return sort;
    }(function (sort, dir) {
      if (this._soql) {
        throw Error('Cannot set sort for the query which has already built SOQL.');
      }
      if (typeof sort === 'string' && typeof dir !== 'undefined') {
        this._config.sort = [[sort, dir]];
      } else {
        this._config.sort = sort;
      }
      return this;
    })
  }, {
    key: "include",
    value: function include(childRelName, conditions, fields) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this._soql) {
        throw Error('Cannot include child relationship into the query which has already built SOQL.');
      }
      var childConfig = {
        fields: fields === null ? undefined : fields,
        table: childRelName,
        conditions: conditions === null ? undefined : conditions,
        limit: options.limit,
        offset: options.offset,
        sort: _sortInstanceProperty(options)
      };
      // eslint-disable-next-line no-use-before-define
      var childQuery = new SubQuery(this._conn, childRelName, childConfig, this);
      this._children.push(childQuery);
      return childQuery;
    }

    /**
     * Include child relationship queries, but not moving down to the children context
     */
  }, {
    key: "includeChildren",
    value: function includeChildren(includes) {
      if (this._soql) {
        throw Error('Cannot include child relationship into the query which has already built SOQL.');
      }
      for (var _i = 0, _arr = _Object$keys(includes); _i < _arr.length; _i++) {
        var crname = _arr[_i];
        var _ref4 = includes[crname],
          _conditions = _ref4.conditions,
          _fields2 = _ref4.fields,
          _options = _objectWithoutProperties(_ref4, _excluded2);
        this.include(crname, _conditions, _fields2, _options);
      }
      return this;
    }

    /**
     * Setting maxFetch query option
     */
  }, {
    key: "maxFetch",
    value: function maxFetch(_maxFetch) {
      this._options.maxFetch = _maxFetch;
      return this;
    }

    /**
     * Switching auto fetch mode
     */
  }, {
    key: "autoFetch",
    value: function autoFetch(_autoFetch) {
      this._options.autoFetch = _autoFetch;
      return this;
    }

    /**
     * Set flag to scan all records including deleted and archived.
     */
  }, {
    key: "scanAll",
    value: function scanAll(_scanAll) {
      this._options.scanAll = _scanAll;
      return this;
    }

    /**
     *
     */
  }, {
    key: "setResponseTarget",
    value: function setResponseTarget(responseTarget) {
      if (responseTarget in ResponseTargets) {
        this._options.responseTarget = responseTarget;
      }
      // force change query response target without changing instance
      return this;
    }

    /**
     * Execute query and fetch records from server.
     */
  }, {
    key: "execute",
    value: function execute() {
      var _this2 = this;
      var options_ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (this._executed) {
        throw new Error('re-executing already executed query');
      }
      if (this._finished) {
        throw new Error('executing already closed query');
      }
      var options = {
        headers: options_.headers || this._options.headers,
        responseTarget: options_.responseTarget || this._options.responseTarget,
        autoFetch: options_.autoFetch || this._options.autoFetch,
        maxFetch: options_.maxFetch || this._options.maxFetch,
        scanAll: options_.scanAll || this._options.scanAll
      };

      // collect fetched records in array
      // only when response target is Records and
      // either callback or chaining promises are available to this query.
      this.once('fetch', function () {
        if (options.responseTarget === ResponseTargets.Records && _this2._chaining) {
          _this2._logger.debug('--- collecting all fetched records ---');
          var records = [];
          var onRecord = function onRecord(record) {
            return records.push(record);
          };
          _this2.on('record', onRecord);
          _this2.once('end', function () {
            _this2.removeListener('record', onRecord);
            _this2.emit('response', records, _this2);
          });
        }
      });

      // flag to prevent re-execution
      this._executed = true;
      _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              // start actual query
              _this2._logger.debug('>>> Query start >>>');
              _context9.prev = 1;
              _context9.next = 4;
              return _this2._execute(options);
            case 4:
              _this2._logger.debug('*** Query finished ***');
              _context9.next = 11;
              break;
            case 7:
              _context9.prev = 7;
              _context9.t0 = _context9["catch"](1);
              _this2._logger.debug('--- Query error ---', _context9.t0);
              _this2.emit('error', _context9.t0);
            case 11:
            case "end":
              return _context9.stop();
          }
        }, _callee, null, [[1, 7]]);
      }))();

      // return Query instance for chaining
      return this;
    }
  }, {
    key: "locatorToUrl",
    value: function locatorToUrl() {
      return this._locator ? [this._conn._baseUrl(), '/query/', this._locator].join('') : '';
    }
  }, {
    key: "urlToLocator",
    value: function urlToLocator(url) {
      return url.split('/').pop();
    }
  }, {
    key: "constructResponse",
    value: function constructResponse(rawDone, responseTarget) {
      var _this$records$, _this$records;
      switch (responseTarget) {
        case 'Count':
          return this.totalSize;
        case 'SingleRecord':
          return (_this$records$ = (_this$records = this.records) === null || _this$records === void 0 ? void 0 : _this$records[0]) !== null && _this$records$ !== void 0 ? _this$records$ : null;
        case 'Records':
          return this.records;
        // QueryResult is default response target
        default:
          return _objectSpread(_objectSpread({}, {
            records: this.records,
            totalSize: this.totalSize,
            done: rawDone !== null && rawDone !== void 0 ? rawDone : true // when no records, done is omitted
          }), this._locator ? {
            nextRecordsUrl: this.locatorToUrl()
          } : {});
      }
    }
    /**
     * @private
     */
  }, {
    key: "_execute",
    value: (function () {
      var _execute2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
        var _this$records2, _context10, _data$records$length, _data$records;
        var headers, responseTarget, autoFetch, maxFetch, scanAll, url, soql, data, numRecords, totalFetched, i, record, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              headers = options.headers, responseTarget = options.responseTarget, autoFetch = options.autoFetch, maxFetch = options.maxFetch, scanAll = options.scanAll;
              this._logger.debug('execute with options', options);
              if (!this._locator) {
                _context11.next = 6;
                break;
              }
              url = this.locatorToUrl();
              _context11.next = 11;
              break;
            case 6:
              _context11.next = 8;
              return this.toSOQL();
            case 8:
              soql = _context11.sent;
              this._logger.debug("SOQL = ".concat(soql));
              url = [this._conn._baseUrl(), '/', scanAll ? 'queryAll' : 'query', '?q=', encodeURIComponent(soql)].join('');
            case 11:
              _context11.next = 13;
              return this._conn.request({
                method: 'GET',
                url: url,
                headers: headers
              });
            case 13:
              data = _context11.sent;
              this.emit('fetch');
              this.totalSize = data.totalSize;
              this.records = (_this$records2 = this.records) === null || _this$records2 === void 0 ? void 0 : _concatInstanceProperty(_this$records2).call(_this$records2, maxFetch - this.records.length > data.records.length ? data.records : _sliceInstanceProperty(_context10 = data.records).call(_context10, 0, maxFetch - this.records.length));
              this._locator = data.nextRecordsUrl ? this.urlToLocator(data.nextRecordsUrl) : undefined;
              this._finished = this._finished || data.done || !autoFetch || this.records.length === maxFetch ||
              // this is what the response looks like when there are no results
              data.records.length === 0 && data.done === undefined;

              // streaming record instances
              numRecords = (_data$records$length = (_data$records = data.records) === null || _data$records === void 0 ? void 0 : _data$records.length) !== null && _data$records$length !== void 0 ? _data$records$length : 0;
              totalFetched = this.totalFetched;
              i = 0;
            case 22:
              if (!(i < numRecords)) {
                _context11.next = 32;
                break;
              }
              if (!(totalFetched >= maxFetch)) {
                _context11.next = 26;
                break;
              }
              this._finished = true;
              return _context11.abrupt("break", 32);
            case 26:
              record = data.records[i];
              this.emit('record', record, totalFetched, this);
              totalFetched += 1;
            case 29:
              i++;
              _context11.next = 22;
              break;
            case 32:
              this.totalFetched = totalFetched;
              if (!this._finished) {
                _context11.next = 40;
                break;
              }
              response = this.constructResponse(data.done, responseTarget); // only fire response event when it should be notified per fetch
              if (responseTarget !== ResponseTargets.Records) {
                this.emit('response', response, this);
              }
              this.emit('end');
              return _context11.abrupt("return", response);
            case 40:
              return _context11.abrupt("return", this._execute(options));
            case 41:
            case "end":
              return _context11.stop();
          }
        }, _callee2, this);
      }));
      function _execute(_x3) {
        return _execute2.apply(this, arguments);
      }
      return _execute;
    }()
    /**
     * Obtain readable stream instance
     */
    )
  }, {
    key: "stream",
    value: function stream() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'csv';
      if (!this._finished && !this._executed) {
        this.execute({
          autoFetch: true
        });
      }
      return type === 'record' ? this._stream : this._stream.stream(type);
    }

    /**
     * Pipe the queried records to another stream
     * This is for backward compatibility; Query is not a record stream instance anymore in 2.0.
     * If you want a record stream instance, use `Query#stream('record')`.
     */
  }, {
    key: "pipe",
    value: function pipe(stream) {
      return this.stream('record').pipe(stream);
    }

    /**
     * @protected
     */
  }, {
    key: "_expandFields",
    value: (function () {
      var _expandFields2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(sobject_) {
        var _context12, _context13, _context14, _context16, _context17;
        var _this$_config, _this$_config$fields, fields, _this$_config$table, table, sobject, _yield$Promise$all, _yield$Promise$all2, efields;
        return _regeneratorRuntime.wrap(function _callee4$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              if (!this._soql) {
                _context18.next = 2;
                break;
              }
              throw new Error('Cannot expand fields for the query which has already built SOQL.');
            case 2:
              _this$_config = this._config, _this$_config$fields = _this$_config.fields, fields = _this$_config$fields === void 0 ? [] : _this$_config$fields, _this$_config$table = _this$_config.table, table = _this$_config$table === void 0 ? '' : _this$_config$table;
              sobject = sobject_ || table;
              this._logger.debug(_concatInstanceProperty(_context12 = "_expandFields: sobject = ".concat(sobject, ", fields = ")).call(_context12, fields.join(', ')));
              _context18.next = 7;
              return _Promise.all(_concatInstanceProperty(_context13 = [this._expandAsteriskFields(sobject, fields)]).call(_context13, _toConsumableArray(_mapInstanceProperty(_context14 = this._children).call(_context14, /*#__PURE__*/function () {
                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(childQuery) {
                  return _regeneratorRuntime.wrap(function _callee3$(_context15) {
                    while (1) switch (_context15.prev = _context15.next) {
                      case 0:
                        _context15.next = 2;
                        return childQuery._expandFields();
                      case 2:
                        return _context15.abrupt("return", []);
                      case 3:
                      case "end":
                        return _context15.stop();
                    }
                  }, _callee3);
                }));
                return function (_x5) {
                  return _ref6.apply(this, arguments);
                };
              }()))));
            case 7:
              _yield$Promise$all = _context18.sent;
              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);
              efields = _yield$Promise$all2[0];
              this._config.fields = efields;
              this._config.includes = _reduceInstanceProperty(_context16 = _mapInstanceProperty(_context17 = this._children).call(_context17, function (cquery) {
                var cconfig = cquery._query._config;
                return [cconfig.table, cconfig];
              })).call(_context16, function (includes, _ref7) {
                var _ref8 = _slicedToArray(_ref7, 2),
                  ctable = _ref8[0],
                  cconfig = _ref8[1];
                return _objectSpread(_objectSpread({}, includes), {}, _defineProperty({}, ctable, cconfig));
              }, {});
            case 12:
            case "end":
              return _context18.stop();
          }
        }, _callee4, this);
      }));
      function _expandFields(_x4) {
        return _expandFields2.apply(this, arguments);
      }
      return _expandFields;
    }()
    /**
     *
     */
    )
  }, {
    key: "_findRelationObject",
    value: (function () {
      var _findRelationObject2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(relName) {
        var _context19;
        var table, sobject, upperRname, _iterator, _step, cr;
        return _regeneratorRuntime.wrap(function _callee5$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              table = this._config.table;
              if (table) {
                _context20.next = 3;
                break;
              }
              throw new Error('No table information provided in the query');
            case 3:
              this._logger.debug(_concatInstanceProperty(_context19 = "finding table for relation \"".concat(relName, "\" in \"")).call(_context19, table, "\"..."));
              _context20.next = 6;
              return this._conn.describe$(table);
            case 6:
              sobject = _context20.sent;
              upperRname = relName.toUpperCase();
              _iterator = _createForOfIteratorHelper(sobject.childRelationships);
              _context20.prev = 9;
              _iterator.s();
            case 11:
              if ((_step = _iterator.n()).done) {
                _context20.next = 17;
                break;
              }
              cr = _step.value;
              if (!((cr.relationshipName || '').toUpperCase() === upperRname && cr.childSObject)) {
                _context20.next = 15;
                break;
              }
              return _context20.abrupt("return", cr.childSObject);
            case 15:
              _context20.next = 11;
              break;
            case 17:
              _context20.next = 22;
              break;
            case 19:
              _context20.prev = 19;
              _context20.t0 = _context20["catch"](9);
              _iterator.e(_context20.t0);
            case 22:
              _context20.prev = 22;
              _iterator.f();
              return _context20.finish(22);
            case 25:
              throw new Error("No child relationship found: ".concat(relName));
            case 26:
            case "end":
              return _context20.stop();
          }
        }, _callee5, this, [[9, 19, 22, 25]]);
      }));
      function _findRelationObject(_x6) {
        return _findRelationObject2.apply(this, arguments);
      }
      return _findRelationObject;
    }()
    /**
     *
     */
    )
  }, {
    key: "_expandAsteriskFields",
    value: (function () {
      var _expandAsteriskFields2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(sobject, fields) {
        var _this3 = this;
        var expandedFields;
        return _regeneratorRuntime.wrap(function _callee7$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.next = 2;
              return _Promise.all(_mapInstanceProperty(fields).call(fields, /*#__PURE__*/function () {
                var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(field) {
                  return _regeneratorRuntime.wrap(function _callee6$(_context21) {
                    while (1) switch (_context21.prev = _context21.next) {
                      case 0:
                        return _context21.abrupt("return", _this3._expandAsteriskField(sobject, field));
                      case 1:
                      case "end":
                        return _context21.stop();
                    }
                  }, _callee6);
                }));
                return function (_x9) {
                  return _ref9.apply(this, arguments);
                };
              }()));
            case 2:
              expandedFields = _context23.sent;
              return _context23.abrupt("return", _reduceInstanceProperty(expandedFields).call(expandedFields, function (eflds, flds) {
                var _context22;
                return _concatInstanceProperty(_context22 = []).call(_context22, _toConsumableArray(eflds), _toConsumableArray(flds));
              }, []));
            case 4:
            case "end":
              return _context23.stop();
          }
        }, _callee7);
      }));
      function _expandAsteriskFields(_x7, _x8) {
        return _expandAsteriskFields2.apply(this, arguments);
      }
      return _expandAsteriskFields;
    }()
    /**
     *
     */
    )
  }, {
    key: "_expandAsteriskField",
    value: (function () {
      var _expandAsteriskField2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(sobject, field) {
        var _context24;
        var fpath, _context26, so, rname, _iterator2, _step2, f, rfield, referenceTo, rtable, fpaths;
        return _regeneratorRuntime.wrap(function _callee8$(_context27) {
          while (1) switch (_context27.prev = _context27.next) {
            case 0:
              this._logger.debug(_concatInstanceProperty(_context24 = "expanding field \"".concat(field, "\" in \"")).call(_context24, sobject, "\"..."));
              fpath = field.split('.');
              if (!(fpath[fpath.length - 1] === '*')) {
                _context27.next = 34;
                break;
              }
              _context27.next = 5;
              return this._conn.describe$(sobject);
            case 5:
              so = _context27.sent;
              this._logger.debug("table ".concat(sobject, " has been described"));
              if (!(fpath.length > 1)) {
                _context27.next = 33;
                break;
              }
              rname = fpath.shift();
              _iterator2 = _createForOfIteratorHelper(so.fields);
              _context27.prev = 10;
              _iterator2.s();
            case 12:
              if ((_step2 = _iterator2.n()).done) {
                _context27.next = 24;
                break;
              }
              f = _step2.value;
              if (!(f.relationshipName && rname && f.relationshipName.toUpperCase() === rname.toUpperCase())) {
                _context27.next = 22;
                break;
              }
              rfield = f;
              referenceTo = rfield.referenceTo || [];
              rtable = referenceTo.length === 1 ? referenceTo[0] : 'Name';
              _context27.next = 20;
              return this._expandAsteriskField(rtable, fpath.join('.'));
            case 20:
              fpaths = _context27.sent;
              return _context27.abrupt("return", _mapInstanceProperty(fpaths).call(fpaths, function (fp) {
                var _context25;
                return _concatInstanceProperty(_context25 = "".concat(rname, ".")).call(_context25, fp);
              }));
            case 22:
              _context27.next = 12;
              break;
            case 24:
              _context27.next = 29;
              break;
            case 26:
              _context27.prev = 26;
              _context27.t0 = _context27["catch"](10);
              _iterator2.e(_context27.t0);
            case 29:
              _context27.prev = 29;
              _iterator2.f();
              return _context27.finish(29);
            case 32:
              return _context27.abrupt("return", []);
            case 33:
              return _context27.abrupt("return", _mapInstanceProperty(_context26 = so.fields).call(_context26, function (f) {
                return f.name;
              }));
            case 34:
              return _context27.abrupt("return", [field]);
            case 35:
            case "end":
              return _context27.stop();
          }
        }, _callee8, this, [[10, 26, 29, 32]]);
      }));
      function _expandAsteriskField(_x10, _x11) {
        return _expandAsteriskField2.apply(this, arguments);
      }
      return _expandAsteriskField;
    }()
    /**
     * Explain plan for executing query
     */
    )
  }, {
    key: "explain",
    value: (function () {
      var _explain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var soql, url;
        return _regeneratorRuntime.wrap(function _callee9$(_context28) {
          while (1) switch (_context28.prev = _context28.next) {
            case 0:
              _context28.next = 2;
              return this.toSOQL();
            case 2:
              soql = _context28.sent;
              this._logger.debug("SOQL = ".concat(soql));
              url = "/query/?explain=".concat(encodeURIComponent(soql));
              return _context28.abrupt("return", this._conn.request(url));
            case 6:
            case "end":
              return _context28.stop();
          }
        }, _callee9, this);
      }));
      function explain() {
        return _explain.apply(this, arguments);
      }
      return explain;
    }()
    /**
     * Return SOQL expression for the query
     */
    )
  }, {
    key: "toSOQL",
    value: (function () {
      var _toSOQL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        return _regeneratorRuntime.wrap(function _callee10$(_context29) {
          while (1) switch (_context29.prev = _context29.next) {
            case 0:
              if (!this._soql) {
                _context29.next = 2;
                break;
              }
              return _context29.abrupt("return", this._soql);
            case 2:
              _context29.next = 4;
              return this._expandFields();
            case 4:
              return _context29.abrupt("return", createSOQL(this._config));
            case 5:
            case "end":
              return _context29.stop();
          }
        }, _callee10, this);
      }));
      function toSOQL() {
        return _toSOQL.apply(this, arguments);
      }
      return toSOQL;
    }()
    /**
     * Promise/A+ interface
     * http://promises-aplus.github.io/promises-spec/
     *
     * Delegate to deferred promise, return promise instance for query result
     */
    )
  }, {
    key: "then",
    value: function then(onResolve, onReject) {
      this._chaining = true;
      if (!this._finished && !this._executed) {
        this.execute();
      }
      if (!this._promise) {
        throw new Error('invalid state: promise is not set after query execution');
      }
      return this._promise.then(onResolve, onReject);
    }
  }, {
    key: "catch",
    value: function _catch(onReject) {
      return this.then(null, onReject);
    }
  }, {
    key: "promise",
    value: function promise() {
      // TODO(cristian): verify this is correct
      return _Promise.resolve(this);
    }

    /**
     * Bulk delete queried records
     */
  }, {
    key: "destroy",
    value: function destroy(type, options) {
      var _options$bulkApiVersi,
        _this4 = this;
      if (_typeof(type) === 'object' && type !== null) {
        options = type;
        type = undefined;
      }
      options = options || {};
      var type_ = type || this._config.table;
      if (!type_) {
        throw new Error('SOQL based query needs SObject type information to bulk delete.');
      }
      // Set the threshold number to pass to bulk API
      var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
      // determine threshold if the connection version supports SObject collection API or not
      this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
      var bulkApiVersion = (_options$bulkApiVersi = options.bulkApiVersion) !== null && _options$bulkApiVersi !== void 0 ? _options$bulkApiVersi : DEFAULT_BULK_API_VERSION;
      return new _Promise(function (resolve, reject) {
        var createBatch = function createBatch() {
          return _this4._conn.sobject(type_).deleteBulk().on('response', resolve).on('error', reject);
        };
        var records = [];
        var batch = null;
        var handleRecord = function handleRecord(rec) {
          if (!rec.Id) {
            var err = new Error('Queried record does not include Salesforce record ID.');
            _this4.emit('error', err);
            return;
          }
          var record = {
            Id: rec.Id
          };
          if (batch) {
            batch.write(record);
          } else {
            records.push(record);
            if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
              // Use bulk delete instead of SObject REST API
              batch = createBatch();
              for (var _i2 = 0, _records = records; _i2 < _records.length; _i2++) {
                var _record = _records[_i2];
                batch.write(_record);
              }
              records = [];
            }
          }
        };
        var handleEnd = function handleEnd() {
          if (batch) {
            batch.end();
          } else {
            var ids = _mapInstanceProperty(records).call(records, function (record) {
              return record.Id;
            });
            if (records.length > thresholdNum && bulkApiVersion === 2) {
              _this4._conn.bulk2.loadAndWaitForResults({
                object: type_,
                operation: 'delete',
                input: records
              }).then(function (allResults) {
                return resolve(_this4.mapBulkV2ResultsToSaveResults(allResults));
              }, reject);
            } else {
              _this4._conn.sobject(type_).destroy(ids, {
                allowRecursive: true
              }).then(resolve, reject);
            }
          }
        };
        _this4.stream('record').on('data', handleRecord).on('end', handleEnd).on('error', reject);
      });
    }
  }, {
    key: "update",
    value: function update(mapping, type, options) {
      var _options$bulkApiVersi2,
        _this5 = this;
      if (_typeof(type) === 'object' && type !== null) {
        options = type;
        type = undefined;
      }
      options = options || {};
      var type_ = type || this._config && this._config.table;
      if (!type_) {
        throw new Error('SOQL based query needs SObject type information to bulk update.');
      }
      var updateStream = typeof mapping === 'function' ? _mapInstanceProperty(RecordStream).call(RecordStream, mapping) : RecordStream.recordMapStream(mapping);
      // Set the threshold number to pass to bulk API
      var thresholdNum = options.allowBulk === false ? -1 : typeof options.bulkThreshold === 'number' ? options.bulkThreshold :
      // determine threshold if the connection version supports SObject collection API or not
      this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn._maxRequest / 2;
      var bulkApiVersion = (_options$bulkApiVersi2 = options.bulkApiVersion) !== null && _options$bulkApiVersi2 !== void 0 ? _options$bulkApiVersi2 : DEFAULT_BULK_API_VERSION;
      return new _Promise(function (resolve, reject) {
        var createBatch = function createBatch() {
          return _this5._conn.sobject(type_).updateBulk().on('response', resolve).on('error', reject);
        };
        var records = [];
        var batch = null;
        var handleRecord = function handleRecord(record) {
          if (batch) {
            batch.write(record);
          } else {
            records.push(record);
          }
          if (thresholdNum >= 0 && records.length > thresholdNum && bulkApiVersion === 1) {
            // Use bulk update instead of SObject REST API
            batch = createBatch();
            for (var _i3 = 0, _records2 = records; _i3 < _records2.length; _i3++) {
              var _record2 = _records2[_i3];
              batch.write(_record2);
            }
            records = [];
          }
        };
        var handleEnd = function handleEnd() {
          if (batch) {
            batch.end();
          } else {
            if (records.length > thresholdNum && bulkApiVersion === 2) {
              _this5._conn.bulk2.loadAndWaitForResults({
                object: type_,
                operation: 'update',
                input: records
              }).then(function (allResults) {
                return resolve(_this5.mapBulkV2ResultsToSaveResults(allResults));
              }, reject);
            } else {
              _this5._conn.sobject(type_).update(records, {
                allowRecursive: true
              }).then(resolve, reject);
            }
          }
        };
        _this5.stream('record').on('error', reject).pipe(updateStream).on('data', handleRecord).on('end', handleEnd).on('error', reject);
      });
    }
  }, {
    key: "mapBulkV2ResultsToSaveResults",
    value: function mapBulkV2ResultsToSaveResults(bulkJobAllResults) {
      var _context30, _context31, _context32;
      var successSaveResults = _mapInstanceProperty(_context30 = bulkJobAllResults.successfulResults).call(_context30, function (r) {
        var saveResult = {
          id: r.sf__Id,
          success: true,
          errors: []
        };
        return saveResult;
      });
      var failedSaveResults = _mapInstanceProperty(_context31 = bulkJobAllResults.failedResults).call(_context31, function (r) {
        var saveResult = {
          success: false,
          errors: [{
            errorCode: r.sf__Error,
            message: r.sf__Error
          }]
        };
        return saveResult;
      });
      return _concatInstanceProperty(_context32 = []).call(_context32, _toConsumableArray(successSaveResults), _toConsumableArray(failedSaveResults));
    }
  }]);
}(EventEmitter);

/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 */
_defineProperty(Query, "_logger", getLogger('query'));
export var SubQuery = /*#__PURE__*/function () {
  /**
   *
   */
  function SubQuery(conn, relName, config, parent) {
    _classCallCheck(this, SubQuery);
    /**
     * Synonym of SubQuery#skip()
     */
    _defineProperty(this, "offset", this.skip);
    /**
     * Synonym of SubQuery#sort()
     */
    _defineProperty(this, "orderby", _sortInstanceProperty(this));
    this._relName = relName;
    this._query = new Query(conn, config);
    this._parent = parent;
  }

  /**
   *
   */
  return _createClass(SubQuery, [{
    key: "select",
    value: function select(fields) {
      // force convert query record type without changing instance
      this._query = this._query.select(fields);
      return this;
    }

    /**
     *
     */
  }, {
    key: "where",
    value: function where(conditions) {
      this._query = this._query.where(conditions);
      return this;
    }

    /**
     * Limit the returning result
     */
  }, {
    key: "limit",
    value: function limit(_limit2) {
      this._query = this._query.limit(_limit2);
      return this;
    }

    /**
     * Skip records
     */
  }, {
    key: "skip",
    value: function skip(offset) {
      this._query = this._query.skip(offset);
      return this;
    }
  }, {
    key: "sort",
    value: function (_sort3) {
      function sort(_x12, _x13) {
        return _sort3.apply(this, arguments);
      }
      sort.toString = function () {
        return _sort3.toString();
      };
      return sort;
    }(function (sort, dir) {
      var _context33;
      this._query = _sortInstanceProperty(_context33 = this._query).call(_context33, sort, dir);
      return this;
    })
  }, {
    key: "_expandFields",
    value: (
    /**
     *
     */
    function () {
      var _expandFields3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var sobject;
        return _regeneratorRuntime.wrap(function _callee11$(_context34) {
          while (1) switch (_context34.prev = _context34.next) {
            case 0:
              _context34.next = 2;
              return this._parent._findRelationObject(this._relName);
            case 2:
              sobject = _context34.sent;
              return _context34.abrupt("return", this._query._expandFields(sobject));
            case 4:
            case "end":
              return _context34.stop();
          }
        }, _callee11, this);
      }));
      function _expandFields() {
        return _expandFields3.apply(this, arguments);
      }
      return _expandFields;
    }()
    /**
     * Back the context to parent query object
     */
    )
  }, {
    key: "end",
    value: function end() {
      return this._parent;
    }
  }]);
}();
export default Query;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJnZXRMb2dnZXIiLCJSZWNvcmRTdHJlYW0iLCJTZXJpYWxpemFibGUiLCJjcmVhdGVTT1FMIiwiUmVzcG9uc2VUYXJnZXRWYWx1ZXMiLCJSZXNwb25zZVRhcmdldHMiLCJfcmVkdWNlSW5zdGFuY2VQcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZXMiLCJ0YXJnZXQiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiREVGQVVMVF9CVUxLX1RIUkVTSE9MRCIsIkRFRkFVTFRfQlVMS19BUElfVkVSU0lPTiIsIlF1ZXJ5IiwiX0V2ZW50RW1pdHRlciIsImNvbm4iLCJjb25maWciLCJvcHRpb25zIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfY2FsbFN1cGVyIiwic2tpcCIsIl9zb3J0SW5zdGFuY2VQcm9wZXJ0eSIsImV4ZWN1dGUiLCJkZXN0cm95IiwiX2Nvbm4iLCJfbG9nZ2VyIiwiX2xvZ0xldmVsIiwiY3JlYXRlSW5zdGFuY2UiLCJfc29xbCIsImRlYnVnIiwiY29uY2F0IiwibG9jYXRvciIsIl9sb2NhdG9yIiwiX2luY2x1ZGVzSW5zdGFuY2VQcm9wZXJ0eSIsInVybFRvTG9jYXRvciIsIl9KU09OJHN0cmluZ2lmeSIsIl9yZWYiLCJmaWVsZHMiLCJpbmNsdWRlcyIsInNvcnQiLCJfY29uZmlnIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwic2VsZWN0IiwiaW5jbHVkZUNoaWxkcmVuIiwiX29wdGlvbnMiLCJoZWFkZXJzIiwibWF4RmV0Y2giLCJhdXRvRmV0Y2giLCJzY2FuQWxsIiwicmVzcG9uc2VUYXJnZXQiLCJfcHJvbWlzZSIsIl9Qcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uIiwiX3N0cmVhbSIsInJlY29yZCIsInB1c2giLCJlcnIiLCJlbWl0IiwiZSIsIl9pbmhlcml0cyIsIl9jcmVhdGVDbGFzcyIsImtleSIsInZhbHVlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJ0b0ZpZWxkQXJyYXkiLCJfY29udGV4dCIsIl9jb250ZXh0MiIsIl9jb250ZXh0NCIsIl9jb250ZXh0NSIsInNwbGl0IiwiX0FycmF5JGlzQXJyYXkiLCJfbWFwSW5zdGFuY2VQcm9wZXJ0eSIsImZzIiwiZiIsIl9jb250ZXh0MyIsIl9jb25jYXRJbnN0YW5jZVByb3BlcnR5IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX09iamVjdCRlbnRyaWVzIiwiX3JlZjIiLCJfcmVmMyIsIl9zbGljZWRUb0FycmF5IiwidiIsIl9jb250ZXh0NiIsInAiLCJfY29udGV4dDciLCJfY29udGV4dDgiLCJ3aGVyZSIsImNvbmRpdGlvbnMiLCJsaW1pdCIsIm9mZnNldCIsIl9zb3J0IiwiX3giLCJfeDIiLCJhcHBseSIsInRvU3RyaW5nIiwiZGlyIiwiaW5jbHVkZSIsImNoaWxkUmVsTmFtZSIsImNoaWxkQ29uZmlnIiwidGFibGUiLCJjaGlsZFF1ZXJ5IiwiU3ViUXVlcnkiLCJfY2hpbGRyZW4iLCJfaSIsIl9hcnIiLCJfT2JqZWN0JGtleXMiLCJjcm5hbWUiLCJfcmVmNCIsIl9leGNsdWRlZDIiLCJzZXRSZXNwb25zZVRhcmdldCIsIl90aGlzMiIsIm9wdGlvbnNfIiwiX2V4ZWN1dGVkIiwiX2ZpbmlzaGVkIiwib25jZSIsIlJlY29yZHMiLCJfY2hhaW5pbmciLCJyZWNvcmRzIiwib25SZWNvcmQiLCJyZW1vdmVMaXN0ZW5lciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQ5IiwicHJldiIsIm5leHQiLCJfZXhlY3V0ZSIsInQwIiwic3RvcCIsImxvY2F0b3JUb1VybCIsIl9iYXNlVXJsIiwiam9pbiIsInVybCIsInBvcCIsImNvbnN0cnVjdFJlc3BvbnNlIiwicmF3RG9uZSIsIl90aGlzJHJlY29yZHMkIiwiX3RoaXMkcmVjb3JkcyIsInRvdGFsU2l6ZSIsImRvbmUiLCJuZXh0UmVjb3Jkc1VybCIsIl9leGVjdXRlMiIsIl9jYWxsZWUyIiwiX3RoaXMkcmVjb3JkczIiLCJfY29udGV4dDEwIiwiX2RhdGEkcmVjb3JkcyRsZW5ndGgiLCJfZGF0YSRyZWNvcmRzIiwic29xbCIsImRhdGEiLCJudW1SZWNvcmRzIiwidG90YWxGZXRjaGVkIiwiaSIsInJlc3BvbnNlIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQxMSIsInRvU09RTCIsInNlbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXF1ZXN0IiwibWV0aG9kIiwiX3NsaWNlSW5zdGFuY2VQcm9wZXJ0eSIsImFicnVwdCIsIl94MyIsInN0cmVhbSIsInR5cGUiLCJwaXBlIiwiX2V4cGFuZEZpZWxkczIiLCJfY2FsbGVlNCIsInNvYmplY3RfIiwiX2NvbnRleHQxMiIsIl9jb250ZXh0MTMiLCJfY29udGV4dDE0IiwiX2NvbnRleHQxNiIsIl9jb250ZXh0MTciLCJfdGhpcyRfY29uZmlnIiwiX3RoaXMkX2NvbmZpZyRmaWVsZHMiLCJfdGhpcyRfY29uZmlnJHRhYmxlIiwic29iamVjdCIsIl95aWVsZCRQcm9taXNlJGFsbCIsIl95aWVsZCRQcm9taXNlJGFsbDIiLCJlZmllbGRzIiwiX2NhbGxlZTQkIiwiX2NvbnRleHQxOCIsImFsbCIsIl9leHBhbmRBc3Rlcmlza0ZpZWxkcyIsIl9yZWY2IiwiX2NhbGxlZTMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDE1IiwiX2V4cGFuZEZpZWxkcyIsIl94NSIsImNxdWVyeSIsImNjb25maWciLCJfcXVlcnkiLCJfcmVmNyIsIl9yZWY4IiwiY3RhYmxlIiwiX3g0IiwiX2ZpbmRSZWxhdGlvbk9iamVjdDIiLCJfY2FsbGVlNSIsInJlbE5hbWUiLCJfY29udGV4dDE5IiwidXBwZXJSbmFtZSIsIl9pdGVyYXRvciIsIl9zdGVwIiwiY3IiLCJfY2FsbGVlNSQiLCJfY29udGV4dDIwIiwiZGVzY3JpYmUkIiwidG9VcHBlckNhc2UiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImNoaWxkUmVsYXRpb25zaGlwcyIsInMiLCJuIiwicmVsYXRpb25zaGlwTmFtZSIsImNoaWxkU09iamVjdCIsImZpbmlzaCIsIl9maW5kUmVsYXRpb25PYmplY3QiLCJfeDYiLCJfZXhwYW5kQXN0ZXJpc2tGaWVsZHMyIiwiX2NhbGxlZTciLCJfdGhpczMiLCJleHBhbmRlZEZpZWxkcyIsIl9jYWxsZWU3JCIsIl9jb250ZXh0MjMiLCJfcmVmOSIsIl9jYWxsZWU2IiwiZmllbGQiLCJfY2FsbGVlNiQiLCJfY29udGV4dDIxIiwiX2V4cGFuZEFzdGVyaXNrRmllbGQiLCJfeDkiLCJlZmxkcyIsImZsZHMiLCJfY29udGV4dDIyIiwiX3g3IiwiX3g4IiwiX2V4cGFuZEFzdGVyaXNrRmllbGQyIiwiX2NhbGxlZTgiLCJfY29udGV4dDI0IiwiZnBhdGgiLCJfY29udGV4dDI2Iiwic28iLCJybmFtZSIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJyZmllbGQiLCJyZWZlcmVuY2VUbyIsInJ0YWJsZSIsImZwYXRocyIsIl9jYWxsZWU4JCIsIl9jb250ZXh0MjciLCJzaGlmdCIsImZwIiwiX2NvbnRleHQyNSIsIm5hbWUiLCJfeDEwIiwiX3gxMSIsIl9leHBsYWluIiwiX2NhbGxlZTkiLCJfY2FsbGVlOSQiLCJfY29udGV4dDI4IiwiZXhwbGFpbiIsIl90b1NPUUwiLCJfY2FsbGVlMTAiLCJfY2FsbGVlMTAkIiwiX2NvbnRleHQyOSIsInRoZW4iLCJvblJlc29sdmUiLCJvblJlamVjdCIsIl9jYXRjaCIsInByb21pc2UiLCJfb3B0aW9ucyRidWxrQXBpVmVyc2kiLCJfdGhpczQiLCJfdHlwZW9mIiwidHlwZV8iLCJ0aHJlc2hvbGROdW0iLCJhbGxvd0J1bGsiLCJidWxrVGhyZXNob2xkIiwiX2Vuc3VyZVZlcnNpb24iLCJfbWF4UmVxdWVzdCIsImJ1bGtBcGlWZXJzaW9uIiwiY3JlYXRlQmF0Y2giLCJkZWxldGVCdWxrIiwiYmF0Y2giLCJoYW5kbGVSZWNvcmQiLCJyZWMiLCJJZCIsIndyaXRlIiwiX2kyIiwiX3JlY29yZHMiLCJoYW5kbGVFbmQiLCJlbmQiLCJpZHMiLCJidWxrMiIsImxvYWRBbmRXYWl0Rm9yUmVzdWx0cyIsIm9iamVjdCIsIm9wZXJhdGlvbiIsImlucHV0IiwiYWxsUmVzdWx0cyIsIm1hcEJ1bGtWMlJlc3VsdHNUb1NhdmVSZXN1bHRzIiwiYWxsb3dSZWN1cnNpdmUiLCJ1cGRhdGUiLCJtYXBwaW5nIiwiX29wdGlvbnMkYnVsa0FwaVZlcnNpMiIsIl90aGlzNSIsInVwZGF0ZVN0cmVhbSIsInJlY29yZE1hcFN0cmVhbSIsInVwZGF0ZUJ1bGsiLCJfaTMiLCJfcmVjb3JkczIiLCJidWxrSm9iQWxsUmVzdWx0cyIsIl9jb250ZXh0MzAiLCJfY29udGV4dDMxIiwiX2NvbnRleHQzMiIsInN1Y2Nlc3NTYXZlUmVzdWx0cyIsInN1Y2Nlc3NmdWxSZXN1bHRzIiwiciIsInNhdmVSZXN1bHQiLCJpZCIsInNmX19JZCIsInN1Y2Nlc3MiLCJlcnJvcnMiLCJmYWlsZWRTYXZlUmVzdWx0cyIsImZhaWxlZFJlc3VsdHMiLCJlcnJvckNvZGUiLCJzZl9fRXJyb3IiLCJtZXNzYWdlIiwicGFyZW50IiwiX3JlbE5hbWUiLCJfcGFyZW50IiwiX3NvcnQzIiwiX3gxMiIsIl94MTMiLCJfY29udGV4dDMzIiwiX2V4cGFuZEZpZWxkczMiLCJfY2FsbGVlMTEiLCJfY2FsbGVlMTEkIiwiX2NvbnRleHQzNCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9xdWVyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlIE1hbmFnZXMgcXVlcnkgZm9yIHJlY29yZHMgaW4gU2FsZXNmb3JjZVxuICogQGF1dGhvciBTaGluaWNoaSBUb21pdGEgPHNoaW5pY2hpLnRvbWl0YUBnbWFpbC5jb20+XG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBMb2dnZXIsIGdldExvZ2dlciB9IGZyb20gJy4vdXRpbC9sb2dnZXInO1xuaW1wb3J0IFJlY29yZFN0cmVhbSwgeyBTZXJpYWxpemFibGUgfSBmcm9tICcuL3JlY29yZC1zdHJlYW0nO1xuaW1wb3J0IENvbm5lY3Rpb24gZnJvbSAnLi9jb25uZWN0aW9uJztcbmltcG9ydCB7IGNyZWF0ZVNPUUwgfSBmcm9tICcuL3NvcWwtYnVpbGRlcic7XG5pbXBvcnQgeyBRdWVyeUNvbmZpZyBhcyBTT1FMUXVlcnlDb25maWcsIFNvcnREaXIgfSBmcm9tICcuL3NvcWwtYnVpbGRlcic7XG5pbXBvcnQge1xuICBSZWNvcmQsXG4gIE9wdGlvbmFsLFxuICBTY2hlbWEsXG4gIFNPYmplY3ROYW1lcyxcbiAgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lcyxcbiAgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZSxcbiAgRmllbGRQcm9qZWN0aW9uQ29uZmlnLFxuICBGaWVsZFBhdGhTcGVjaWZpZXIsXG4gIEZpZWxkUGF0aFNjb3BlZFByb2plY3Rpb24sXG4gIFNPYmplY3RSZWNvcmQsXG4gIFNPYmplY3RJbnB1dFJlY29yZCxcbiAgU09iamVjdFVwZGF0ZVJlY29yZCxcbiAgU2F2ZVJlc3VsdCxcbiAgRGF0ZVN0cmluZyxcbiAgU09iamVjdENoaWxkUmVsYXRpb25zaGlwUHJvcCxcbiAgU09iamVjdEZpZWxkTmFtZXMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IFNmRGF0ZSBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IHsgSW5nZXN0Sm9iVjJSZXN1bHRzIH0gZnJvbSAnLi9hcGkvYnVsazInO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5RmllbGQ8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+ID0gRmllbGRQYXRoU3BlY2lmaWVyPFMsIE4+XG4+ID0gRlAgfCBGUFtdIHwgc3RyaW5nIHwgc3RyaW5nW10gfCB7IFtmaWVsZDogc3RyaW5nXTogbnVtYmVyIHwgYm9vbGVhbiB9O1xuXG4vKipcbiAqXG4gKi9cbnR5cGUgQ1ZhbHVlPFQ+ID0gVCBleHRlbmRzIERhdGVTdHJpbmdcbiAgPyBTZkRhdGVcbiAgOiBUIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhblxuICA/IFRcbiAgOiBuZXZlcjtcblxudHlwZSBDb25kT3A8VD4gPVxuICB8IFsnJGVxJywgQ1ZhbHVlPFQ+IHwgbnVsbF1cbiAgfCBbJyRuZScsIENWYWx1ZTxUPiB8IG51bGxdXG4gIHwgWyckZ3QnLCBDVmFsdWU8VD5dXG4gIHwgWyckZ3RlJywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0JywgQ1ZhbHVlPFQ+XVxuICB8IFsnJGx0ZScsIENWYWx1ZTxUPl1cbiAgfCBbJyRsaWtlJywgVCBleHRlbmRzIHN0cmluZyA/IFQgOiBuZXZlcl1cbiAgfCBbJyRubGlrZScsIFQgZXh0ZW5kcyBzdHJpbmcgPyBUIDogbmV2ZXJdXG4gIHwgWyckaW4nLCBBcnJheTxDVmFsdWU8VD4+XVxuICB8IFsnJG5pbicsIEFycmF5PENWYWx1ZTxUPj5dXG4gIHwgWyckaW5jbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhjbHVkZXMnLCBUIGV4dGVuZHMgc3RyaW5nID8gVFtdIDogbmV2ZXJdXG4gIHwgWyckZXhpc3RzJywgYm9vbGVhbl07XG5cbnR5cGUgQ29uZFZhbHVlT2JqPFQsIE9wID0gQ29uZE9wPFQ+WzBdPiA9IE9wIGV4dGVuZHMgQ29uZE9wPFQ+WzBdXG4gID8gT3AgZXh0ZW5kcyBzdHJpbmdcbiAgICA/IHsgW0sgaW4gT3BdOiBFeHRyYWN0PENvbmRPcDxUPiwgW09wLCBhbnldPlsxXSB9XG4gICAgOiBuZXZlclxuICA6IG5ldmVyO1xuXG50eXBlIENvbmRWYWx1ZTxUPiA9IENWYWx1ZTxUPiB8IEFycmF5PENWYWx1ZTxUPj4gfCBudWxsIHwgQ29uZFZhbHVlT2JqPFQ+O1xuXG50eXBlIENvbmRpdGlvblNldDxSIGV4dGVuZHMgUmVjb3JkPiA9IHtcbiAgW0sgaW4ga2V5b2YgUl0/OiBDb25kVmFsdWU8UltLXT47XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeUNvbmRpdGlvbjxTIGV4dGVuZHMgU2NoZW1hLCBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+PiA9XG4gIHwge1xuICAgICAgJG9yOiBBcnJheTxRdWVyeUNvbmRpdGlvbjxTLCBOPj47XG4gICAgfVxuICB8IHtcbiAgICAgICRhbmQ6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPFMsIE4+PjtcbiAgICB9XG4gIHwgQ29uZGl0aW9uU2V0PFNPYmplY3RSZWNvcmQ8UywgTj4+O1xuXG5leHBvcnQgdHlwZSBRdWVyeVNvcnQ8XG4gIFMgZXh0ZW5kcyBTY2hlbWEsXG4gIE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIFIgZXh0ZW5kcyBTT2JqZWN0UmVjb3JkPFMsIE4+ID0gU09iamVjdFJlY29yZDxTLCBOPlxuPiA9XG4gIHwge1xuICAgICAgW0sgaW4ga2V5b2YgUl0/OiBTb3J0RGlyO1xuICAgIH1cbiAgfCBBcnJheTxba2V5b2YgUiwgU29ydERpcl0+O1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5Q29uZmlnPFxuICBTIGV4dGVuZHMgU2NoZW1hLFxuICBOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+LFxuICBGUCBleHRlbmRzIEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPiA9IEZpZWxkUGF0aFNwZWNpZmllcjxTLCBOPlxuPiA9IHtcbiAgZmllbGRzPzogUXVlcnlGaWVsZDxTLCBOLCBGUD47XG4gIGluY2x1ZGVzPzoge1xuICAgIFtDUk4gaW4gQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBOPl0/OiBRdWVyeUNvbmZpZzxcbiAgICAgIFMsXG4gICAgICBDaGlsZFJlbGF0aW9uc2hpcFNPYmplY3ROYW1lPFMsIE4sIENSTj5cbiAgICA+O1xuICB9O1xuICB0YWJsZT86IHN0cmluZztcbiAgY29uZGl0aW9ucz86IFF1ZXJ5Q29uZGl0aW9uPFMsIE4+O1xuICBzb3J0PzogUXVlcnlTb3J0PFMsIE4+O1xuICBsaW1pdD86IG51bWJlcjtcbiAgb2Zmc2V0PzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUXVlcnlPcHRpb25zID0ge1xuICBoZWFkZXJzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgbWF4RmV0Y2g6IG51bWJlcjtcbiAgYXV0b0ZldGNoOiBib29sZWFuO1xuICBzY2FuQWxsOiBib29sZWFuO1xuICByZXNwb25zZVRhcmdldDogUXVlcnlSZXNwb25zZVRhcmdldDtcbn07XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5UmVzdWx0PFIgZXh0ZW5kcyBSZWNvcmQ+ID0ge1xuICBkb25lOiBib29sZWFuO1xuICB0b3RhbFNpemU6IG51bWJlcjtcbiAgcmVjb3JkczogUltdO1xuICBuZXh0UmVjb3Jkc1VybD86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5RXhwbGFpblJlc3VsdCA9IHtcbiAgcGxhbnM6IEFycmF5PHtcbiAgICBjYXJkaW5hbGl0eTogbnVtYmVyO1xuICAgIGZpZWxkczogc3RyaW5nW107XG4gICAgbGVhZGluZ09wZXJhdGlvblR5cGU6ICdJbmRleCcgfCAnT3RoZXInIHwgJ1NoYXJpbmcnIHwgJ1RhYmxlU2Nhbic7XG4gICAgbm90ZXM6IEFycmF5PHtcbiAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgICBmaWVsZHM6IHN0cmluZ1tdO1xuICAgICAgdGFibGVFbnVtT3JJZDogc3RyaW5nO1xuICAgIH0+O1xuICAgIHJlbGF0aXZlQ29zdDogbnVtYmVyO1xuICAgIHNvYmplY3RDYXJkaW5hbGl0eTogbnVtYmVyO1xuICAgIHNvYmplY3RUeXBlOiBzdHJpbmc7XG4gIH0+O1xufTtcblxuY29uc3QgUmVzcG9uc2VUYXJnZXRWYWx1ZXMgPSBbXG4gICdRdWVyeVJlc3VsdCcsXG4gICdSZWNvcmRzJyxcbiAgJ1NpbmdsZVJlY29yZCcsXG4gICdDb3VudCcsXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBRdWVyeVJlc3BvbnNlVGFyZ2V0ID0gdHlwZW9mIFJlc3BvbnNlVGFyZ2V0VmFsdWVzW251bWJlcl07XG5cbmV4cG9ydCBjb25zdCBSZXNwb25zZVRhcmdldHM6IHtcbiAgW0sgaW4gUXVlcnlSZXNwb25zZVRhcmdldF06IEs7XG59ID0gUmVzcG9uc2VUYXJnZXRWYWx1ZXMucmVkdWNlKFxuICAodmFsdWVzLCB0YXJnZXQpID0+ICh7IC4uLnZhbHVlcywgW3RhcmdldF06IHRhcmdldCB9KSxcbiAge30gYXMge1xuICAgIFtLIGluIFF1ZXJ5UmVzcG9uc2VUYXJnZXRdOiBLO1xuICB9LFxuKTtcblxuZXhwb3J0IHR5cGUgUXVlcnlSZXNwb25zZTxcbiAgUiBleHRlbmRzIFJlY29yZCxcbiAgUVJUIGV4dGVuZHMgUXVlcnlSZXNwb25zZVRhcmdldCA9IFF1ZXJ5UmVzcG9uc2VUYXJnZXRcbj4gPSBRUlQgZXh0ZW5kcyAnUXVlcnlSZXN1bHQnXG4gID8gUXVlcnlSZXN1bHQ8Uj5cbiAgOiBRUlQgZXh0ZW5kcyAnUmVjb3JkcydcbiAgPyBSW11cbiAgOiBRUlQgZXh0ZW5kcyAnU2luZ2xlUmVjb3JkJ1xuICA/IFIgfCBudWxsXG4gIDogbnVtYmVyOyAvLyBRUlQgZXh0ZW5kcyAnQ291bnQnXG5cbmV4cG9ydCB0eXBlIEJ1bGtBcGlWZXJzaW9uID0gMSB8IDI7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5RGVzdHJveU9wdGlvbnMgPSB7XG4gIGFsbG93QnVsaz86IGJvb2xlYW47XG4gIGJ1bGtUaHJlc2hvbGQ/OiBudW1iZXI7XG4gIGJ1bGtBcGlWZXJzaW9uPzogQnVsa0FwaVZlcnNpb247XG59O1xuXG5leHBvcnQgdHlwZSBRdWVyeVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGFsbG93QnVsaz86IGJvb2xlYW47XG4gIGJ1bGtUaHJlc2hvbGQ/OiBudW1iZXI7XG4gIGJ1bGtBcGlWZXJzaW9uPzogQnVsa0FwaVZlcnNpb247XG59O1xuXG4vKipcbiAqXG4gKi9cbmNvbnN0IERFRkFVTFRfQlVMS19USFJFU0hPTEQgPSAyMDA7XG5jb25zdCBERUZBVUxUX0JVTEtfQVBJX1ZFUlNJT04gPSAxO1xuXG4vKipcbiAqIFF1ZXJ5XG4gKi9cbmV4cG9ydCBjbGFzcyBRdWVyeTxcbiAgUyBleHRlbmRzIFNjaGVtYSxcbiAgTiBleHRlbmRzIFNPYmplY3ROYW1lczxTPixcbiAgUiBleHRlbmRzIFJlY29yZCA9IFJlY29yZCxcbiAgUVJUIGV4dGVuZHMgUXVlcnlSZXNwb25zZVRhcmdldCA9IFF1ZXJ5UmVzcG9uc2VUYXJnZXRcbj4gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBzdGF0aWMgX2xvZ2dlciA9IGdldExvZ2dlcigncXVlcnknKTtcblxuICBfY29ubjogQ29ubmVjdGlvbjxTPjtcbiAgX2xvZ2dlcjogTG9nZ2VyO1xuICBfc29xbDogT3B0aW9uYWw8c3RyaW5nPjtcbiAgX2xvY2F0b3I6IE9wdGlvbmFsPHN0cmluZz47XG4gIF9jb25maWc6IFNPUUxRdWVyeUNvbmZpZyA9IHt9O1xuICBfY2hpbGRyZW46IEFycmF5PFN1YlF1ZXJ5PFMsIE4sIFIsIFFSVCwgYW55LCBhbnksIGFueT4+ID0gW107XG4gIF9vcHRpb25zOiBRdWVyeU9wdGlvbnM7XG4gIF9leGVjdXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBfZmluaXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgX2NoYWluaW5nOiBib29sZWFuID0gZmFsc2U7XG4gIF9wcm9taXNlOiBQcm9taXNlPFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPj47XG4gIF9zdHJlYW06IFNlcmlhbGl6YWJsZTxSPjtcblxuICB0b3RhbFNpemUgPSAwO1xuICB0b3RhbEZldGNoZWQgPSAwO1xuICByZWNvcmRzOiBSW10gPSBbXTtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbm46IENvbm5lY3Rpb248Uz4sXG4gICAgY29uZmlnOiBzdHJpbmcgfCBRdWVyeUNvbmZpZzxTLCBOPiB8IHsgbG9jYXRvcjogc3RyaW5nIH0sXG4gICAgb3B0aW9ucz86IFBhcnRpYWw8UXVlcnlPcHRpb25zPixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jb25uID0gY29ubjtcbiAgICB0aGlzLl9sb2dnZXIgPSBjb25uLl9sb2dMZXZlbFxuICAgICAgPyBRdWVyeS5fbG9nZ2VyLmNyZWF0ZUluc3RhbmNlKGNvbm4uX2xvZ0xldmVsKVxuICAgICAgOiBRdWVyeS5fbG9nZ2VyO1xuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fc29xbCA9IGNvbmZpZztcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhgY29uZmlnIGlzIHNvcWw6ICR7Y29uZmlnfWApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIChjb25maWcgYXMgYW55KS5sb2NhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgbG9jYXRvcjogc3RyaW5nID0gKGNvbmZpZyBhcyBhbnkpLmxvY2F0b3I7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYGNvbmZpZyBpcyBsb2NhdG9yOiAke2xvY2F0b3J9YCk7XG4gICAgICB0aGlzLl9sb2NhdG9yID0gbG9jYXRvci5pbmNsdWRlcygnLycpXG4gICAgICAgID8gdGhpcy51cmxUb0xvY2F0b3IobG9jYXRvcilcbiAgICAgICAgOiBsb2NhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYGNvbmZpZyBpcyBRdWVyeUNvbmZpZzogJHtKU09OLnN0cmluZ2lmeShjb25maWcpfWApO1xuICAgICAgY29uc3QgeyBmaWVsZHMsIGluY2x1ZGVzLCBzb3J0LCAuLi5fY29uZmlnIH0gPSBjb25maWcgYXMgUXVlcnlDb25maWc8XG4gICAgICAgIFMsXG4gICAgICAgIE5cbiAgICAgID47XG4gICAgICB0aGlzLl9jb25maWcgPSBfY29uZmlnO1xuICAgICAgdGhpcy5zZWxlY3QoZmllbGRzKTtcbiAgICAgIGlmIChpbmNsdWRlcykge1xuICAgICAgICB0aGlzLmluY2x1ZGVDaGlsZHJlbihpbmNsdWRlcyk7XG4gICAgICB9XG4gICAgICBpZiAoc29ydCkge1xuICAgICAgICB0aGlzLnNvcnQoc29ydCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIG1heEZldGNoOiAxMDAwMCxcbiAgICAgIGF1dG9GZXRjaDogZmFsc2UsXG4gICAgICBzY2FuQWxsOiBmYWxzZSxcbiAgICAgIHJlc3BvbnNlVGFyZ2V0OiAnUXVlcnlSZXN1bHQnLFxuICAgICAgLi4uKG9wdGlvbnMgfHwge30pLFxuICAgIH0gYXMgUXVlcnlPcHRpb25zO1xuICAgIC8vIHByb21pc2UgaW5zdGFuY2VcbiAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5vbigncmVzcG9uc2UnLCByZXNvbHZlKTtcbiAgICAgIHRoaXMub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICB9KTtcbiAgICB0aGlzLl9zdHJlYW0gPSBuZXcgU2VyaWFsaXphYmxlKCk7XG4gICAgdGhpcy5vbigncmVjb3JkJywgKHJlY29yZCkgPT4gdGhpcy5fc3RyZWFtLnB1c2gocmVjb3JkKSk7XG4gICAgdGhpcy5vbignZW5kJywgKCkgPT4gdGhpcy5fc3RyZWFtLnB1c2gobnVsbCkpO1xuICAgIHRoaXMub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCBmaWVsZHMgdG8gaW5jbHVkZSBpbiB0aGUgcmV0dXJuaW5nIHJlc3VsdFxuICAgKi9cbiAgc2VsZWN0PFxuICAgIFIgZXh0ZW5kcyBSZWNvcmQgPSBSZWNvcmQsXG4gICAgRlAgZXh0ZW5kcyBGaWVsZFBhdGhTcGVjaWZpZXI8UywgTj4gPSBGaWVsZFBhdGhTcGVjaWZpZXI8UywgTj4sXG4gICAgRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBOLCBGUD4sXG4gICAgUjIgZXh0ZW5kcyBTT2JqZWN0UmVjb3JkPFMsIE4sIEZQQywgUj4gPSBTT2JqZWN0UmVjb3JkPFMsIE4sIEZQQywgUj5cbiAgPihmaWVsZHM6IFF1ZXJ5RmllbGQ8UywgTiwgRlA+ID0gJyonKTogUXVlcnk8UywgTiwgUjIsIFFSVD4ge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgc2VsZWN0IGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvRmllbGRBcnJheShmaWVsZHM6IFF1ZXJ5RmllbGQ8UywgTiwgRlA+KTogc3RyaW5nW10ge1xuICAgICAgcmV0dXJuIHR5cGVvZiBmaWVsZHMgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZmllbGRzLnNwbGl0KC9cXHMqLFxccyovKVxuICAgICAgICA6IEFycmF5LmlzQXJyYXkoZmllbGRzKVxuICAgICAgICA/IChmaWVsZHMgYXMgQXJyYXk8c3RyaW5nIHwgRlA+KVxuICAgICAgICAgICAgLm1hcCh0b0ZpZWxkQXJyYXkpXG4gICAgICAgICAgICAucmVkdWNlPHN0cmluZ1tdPigoZnMsIGYpID0+IFsuLi5mcywgLi4uZl0sIFtdKVxuICAgICAgICA6IE9iamVjdC5lbnRyaWVzKGZpZWxkcyBhcyB7IFtuYW1lOiBzdHJpbmddOiBRdWVyeUZpZWxkPFMsIE4sIEZQPiB9KVxuICAgICAgICAgICAgLm1hcCgoW2YsIHZdKSA9PiB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB2ID8gW2ZdIDogW107XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvRmllbGRBcnJheSh2KS5tYXAoKHApID0+IGAke2Z9LiR7cH1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5yZWR1Y2U8c3RyaW5nW10+KChmcywgZikgPT4gWy4uLmZzLCAuLi5mXSwgW10pO1xuICAgIH1cbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICB0aGlzLl9jb25maWcuZmllbGRzID0gdG9GaWVsZEFycmF5KGZpZWxkcyk7XG4gICAgfVxuICAgIC8vIGZvcmNlIGNvbnZlcnQgcXVlcnkgcmVjb3JkIHR5cGUgd2l0aG91dCBjaGFuZ2luZyBpbnN0YW5jZTtcbiAgICByZXR1cm4gKHRoaXMgYXMgYW55KSBhcyBRdWVyeTxTLCBOLCBSMiwgUVJUPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgY29uZGl0aW9ucyB0byBmaWx0ZXIgdGhlIHJlc3VsdCByZWNvcmRzXG4gICAqL1xuICB3aGVyZShjb25kaXRpb25zOiBRdWVyeUNvbmRpdGlvbjxTLCBOPiB8IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgd2hlcmUgY29uZGl0aW9ucyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZy5jb25kaXRpb25zID0gY29uZGl0aW9ucztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW1pdCB0aGUgcmV0dXJuaW5nIHJlc3VsdFxuICAgKi9cbiAgbGltaXQobGltaXQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBzZXQgbGltaXQgZm9yIHRoZSBxdWVyeSB3aGljaCBoYXMgYWxyZWFkeSBidWlsdCBTT1FMLicsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLl9jb25maWcubGltaXQgPSBsaW1pdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTa2lwIHJlY29yZHNcbiAgICovXG4gIHNraXAob2Zmc2V0OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdDYW5ub3Qgc2V0IHNraXAvb2Zmc2V0IGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5fY29uZmlnLm9mZnNldCA9IG9mZnNldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I3NraXAoKVxuICAgKi9cbiAgb2Zmc2V0ID0gdGhpcy5za2lwO1xuXG4gIC8qKlxuICAgKiBTZXQgcXVlcnkgc29ydCB3aXRoIGRpcmVjdGlvblxuICAgKi9cbiAgc29ydChzb3J0OiBRdWVyeVNvcnQ8UywgTj58c3RyaW5nKTogdGhpcztcbiAgc29ydChzb3J0OiBTT2JqZWN0RmllbGROYW1lczxTLCBOPnxzdHJpbmcsIGRpcjogU29ydERpcik6IHRoaXM7XG4gIHNvcnQoXG4gICAgc29ydDogUXVlcnlTb3J0PFMsIE4+IHwgU09iamVjdEZpZWxkTmFtZXM8UywgTj4gfCBzdHJpbmcsXG4gICAgZGlyPzogU29ydERpcixcbiAgKSB7XG4gICAgaWYgKHRoaXMuX3NvcWwpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnQ2Fubm90IHNldCBzb3J0IGZvciB0aGUgcXVlcnkgd2hpY2ggaGFzIGFscmVhZHkgYnVpbHQgU09RTC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzb3J0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGlyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5fY29uZmlnLnNvcnQgPSBbW3NvcnQsIGRpcl1dO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb25maWcuc29ydCA9IHNvcnQgYXMgc3RyaW5nIHwgeyBbZmllbGQ6IHN0cmluZ106IFNvcnREaXIgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBRdWVyeSNzb3J0KClcbiAgICovXG4gIG9yZGVyYnk6IHR5cGVvZiBRdWVyeS5wcm90b3R5cGUuc29ydCA9IHRoaXMuc29ydDtcblxuICAvKipcbiAgICogSW5jbHVkZSBjaGlsZCByZWxhdGlvbnNoaXAgcXVlcnkgYW5kIG1vdmUgZG93biB0byB0aGUgY2hpbGQgcXVlcnkgY29udGV4dFxuICAgKi9cbiAgaW5jbHVkZTxcbiAgICBDUk4gZXh0ZW5kcyBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+LFxuICAgIENOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZTxTLCBOLCBDUk4+LFxuICAgIENGUCBleHRlbmRzIEZpZWxkUGF0aFNwZWNpZmllcjxTLCBDTj4gPSBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+LFxuICAgIENGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIENOLCBDRlA+LFxuICAgIENSIGV4dGVuZHMgUmVjb3JkID0gU09iamVjdFJlY29yZDxTLCBDTiwgQ0ZQQz5cbiAgPihcbiAgICBjaGlsZFJlbE5hbWU6IENSTixcbiAgICBjb25kaXRpb25zPzogT3B0aW9uYWw8UXVlcnlDb25kaXRpb248UywgQ04+PixcbiAgICBmaWVsZHM/OiBPcHRpb25hbDxRdWVyeUZpZWxkPFMsIENOLCBDRlA+PixcbiAgICBvcHRpb25zPzogeyBsaW1pdD86IG51bWJlcjsgb2Zmc2V0PzogbnVtYmVyOyBzb3J0PzogUXVlcnlTb3J0PFMsIENOPiB9LFxuICApOiBTdWJRdWVyeTxTLCBOLCBSLCBRUlQsIENSTiwgQ04sIENSPjtcbiAgaW5jbHVkZTxcbiAgICBDUk4gZXh0ZW5kcyBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+LFxuICAgIENOIGV4dGVuZHMgU09iamVjdE5hbWVzPFM+LFxuICAgIENSIGV4dGVuZHMgUmVjb3JkID0gU09iamVjdFJlY29yZDxTLCBDTj5cbiAgPihcbiAgICBjaGlsZFJlbE5hbWU6IHN0cmluZyxcbiAgICBjb25kaXRpb25zPzogT3B0aW9uYWw8UXVlcnlDb25kaXRpb248UywgQ04+PixcbiAgICBmaWVsZHM/OiBPcHRpb25hbDxRdWVyeUZpZWxkPFMsIENOPj4sXG4gICAgb3B0aW9ucz86IHsgbGltaXQ/OiBudW1iZXI7IG9mZnNldD86IG51bWJlcjsgc29ydD86IFF1ZXJ5U29ydDxTLCBDTj4gfSxcbiAgKTogU3ViUXVlcnk8UywgTiwgUiwgUVJULCBDUk4sIENOLCBDUj47XG5cbiAgaW5jbHVkZTxcbiAgICBDUk4gZXh0ZW5kcyBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIE4+LFxuICAgIENOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZTxTLCBOLCBDUk4+LFxuICAgIENGUCBleHRlbmRzIEZpZWxkUGF0aFNwZWNpZmllcjxTLCBDTj4gPSBGaWVsZFBhdGhTcGVjaWZpZXI8UywgQ04+LFxuICAgIENGUEMgZXh0ZW5kcyBGaWVsZFByb2plY3Rpb25Db25maWcgPSBGaWVsZFBhdGhTY29wZWRQcm9qZWN0aW9uPFMsIENOLCBDRlA+LFxuICAgIENSIGV4dGVuZHMgUmVjb3JkID0gU09iamVjdFJlY29yZDxTLCBDTiwgQ0ZQQz5cbiAgPihcbiAgICBjaGlsZFJlbE5hbWU6IENSTiB8IHN0cmluZyxcbiAgICBjb25kaXRpb25zPzogT3B0aW9uYWw8UXVlcnlDb25kaXRpb248UywgQ04+PixcbiAgICBmaWVsZHM/OiBPcHRpb25hbDxRdWVyeUZpZWxkPFMsIENOLCBDRlA+PixcbiAgICBvcHRpb25zOiB7IGxpbWl0PzogbnVtYmVyOyBvZmZzZXQ/OiBudW1iZXI7IHNvcnQ/OiBRdWVyeVNvcnQ8UywgQ04+IH0gPSB7fSxcbiAgKTogU3ViUXVlcnk8UywgTiwgUiwgUVJULCBDUk4sIENOLCBDUj4ge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBpbmNsdWRlIGNoaWxkIHJlbGF0aW9uc2hpcCBpbnRvIHRoZSBxdWVyeSB3aGljaCBoYXMgYWxyZWFkeSBidWlsdCBTT1FMLicsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZENvbmZpZzogUXVlcnlDb25maWc8UywgQ04sIENGUD4gPSB7XG4gICAgICBmaWVsZHM6IGZpZWxkcyA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IGZpZWxkcyxcbiAgICAgIHRhYmxlOiBjaGlsZFJlbE5hbWUsXG4gICAgICBjb25kaXRpb25zOiBjb25kaXRpb25zID09PSBudWxsID8gdW5kZWZpbmVkIDogY29uZGl0aW9ucyxcbiAgICAgIGxpbWl0OiBvcHRpb25zLmxpbWl0LFxuICAgICAgb2Zmc2V0OiBvcHRpb25zLm9mZnNldCxcbiAgICAgIHNvcnQ6IG9wdGlvbnMuc29ydCxcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICAgIGNvbnN0IGNoaWxkUXVlcnkgPSBuZXcgU3ViUXVlcnk8UywgTiwgUiwgUVJULCBDUk4sIENOLCBDUj4oXG4gICAgICB0aGlzLl9jb25uLFxuICAgICAgY2hpbGRSZWxOYW1lIGFzIENSTixcbiAgICAgIGNoaWxkQ29uZmlnLFxuICAgICAgdGhpcyxcbiAgICApO1xuICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGRRdWVyeSk7XG4gICAgcmV0dXJuIGNoaWxkUXVlcnk7XG4gIH1cblxuICAvKipcbiAgICogSW5jbHVkZSBjaGlsZCByZWxhdGlvbnNoaXAgcXVlcmllcywgYnV0IG5vdCBtb3ZpbmcgZG93biB0byB0aGUgY2hpbGRyZW4gY29udGV4dFxuICAgKi9cbiAgaW5jbHVkZUNoaWxkcmVuKFxuICAgIGluY2x1ZGVzOiB7XG4gICAgICBbQ1JOIGluIENoaWxkUmVsYXRpb25zaGlwTmFtZXM8UywgTj5dPzogUXVlcnlDb25maWc8XG4gICAgICAgIFMsXG4gICAgICAgIENoaWxkUmVsYXRpb25zaGlwU09iamVjdE5hbWU8UywgTiwgQ1JOPlxuICAgICAgPjtcbiAgICB9LFxuICApIHtcbiAgICB0eXBlIENSTiA9IENoaWxkUmVsYXRpb25zaGlwTmFtZXM8UywgTj47XG4gICAgaWYgKHRoaXMuX3NvcWwpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGluY2x1ZGUgY2hpbGQgcmVsYXRpb25zaGlwIGludG8gdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY3JuYW1lIG9mIE9iamVjdC5rZXlzKGluY2x1ZGVzKSBhcyBDUk5bXSkge1xuICAgICAgY29uc3QgeyBjb25kaXRpb25zLCBmaWVsZHMsIC4uLm9wdGlvbnMgfSA9IGluY2x1ZGVzW1xuICAgICAgICBjcm5hbWVcbiAgICAgIF0gYXMgUXVlcnlDb25maWc8UywgQ2hpbGRSZWxhdGlvbnNoaXBTT2JqZWN0TmFtZTxTLCBOLCBDUk4+PjtcbiAgICAgIHRoaXMuaW5jbHVkZShjcm5hbWUsIGNvbmRpdGlvbnMsIGZpZWxkcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHRpbmcgbWF4RmV0Y2ggcXVlcnkgb3B0aW9uXG4gICAqL1xuICBtYXhGZXRjaChtYXhGZXRjaDogbnVtYmVyKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5tYXhGZXRjaCA9IG1heEZldGNoO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN3aXRjaGluZyBhdXRvIGZldGNoIG1vZGVcbiAgICovXG4gIGF1dG9GZXRjaChhdXRvRmV0Y2g6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcHRpb25zLmF1dG9GZXRjaCA9IGF1dG9GZXRjaDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZmxhZyB0byBzY2FuIGFsbCByZWNvcmRzIGluY2x1ZGluZyBkZWxldGVkIGFuZCBhcmNoaXZlZC5cbiAgICovXG4gIHNjYW5BbGwoc2NhbkFsbDogYm9vbGVhbikge1xuICAgIHRoaXMuX29wdGlvbnMuc2NhbkFsbCA9IHNjYW5BbGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHNldFJlc3BvbnNlVGFyZ2V0PFFSVDEgZXh0ZW5kcyBRdWVyeVJlc3BvbnNlVGFyZ2V0PihcbiAgICByZXNwb25zZVRhcmdldDogUVJUMSxcbiAgKTogUXVlcnk8UywgTiwgUiwgUVJUMT4ge1xuICAgIGlmIChyZXNwb25zZVRhcmdldCBpbiBSZXNwb25zZVRhcmdldHMpIHtcbiAgICAgIHRoaXMuX29wdGlvbnMucmVzcG9uc2VUYXJnZXQgPSByZXNwb25zZVRhcmdldDtcbiAgICB9XG4gICAgLy8gZm9yY2UgY2hhbmdlIHF1ZXJ5IHJlc3BvbnNlIHRhcmdldCB3aXRob3V0IGNoYW5naW5nIGluc3RhbmNlXG4gICAgcmV0dXJuICh0aGlzIGFzIFF1ZXJ5PFMsIE4sIFI+KSBhcyBRdWVyeTxTLCBOLCBSLCBRUlQxPjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHF1ZXJ5IGFuZCBmZXRjaCByZWNvcmRzIGZyb20gc2VydmVyLlxuICAgKi9cbiAgZXhlY3V0ZTxRUlQxIGV4dGVuZHMgUXVlcnlSZXNwb25zZVRhcmdldCA9IFFSVD4oXG4gICAgb3B0aW9uc186IFBhcnRpYWw8UXVlcnlPcHRpb25zPiAmIHsgcmVzcG9uc2VUYXJnZXQ/OiBRUlQxIH0gPSB7fSxcbiAgKTogUXVlcnk8UywgTiwgUiwgUVJUMT4ge1xuICAgIGlmICh0aGlzLl9leGVjdXRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZS1leGVjdXRpbmcgYWxyZWFkeSBleGVjdXRlZCBxdWVyeScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdleGVjdXRpbmcgYWxyZWFkeSBjbG9zZWQgcXVlcnknKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgaGVhZGVyczogb3B0aW9uc18uaGVhZGVycyB8fCB0aGlzLl9vcHRpb25zLmhlYWRlcnMsXG4gICAgICByZXNwb25zZVRhcmdldDogb3B0aW9uc18ucmVzcG9uc2VUYXJnZXQgfHwgdGhpcy5fb3B0aW9ucy5yZXNwb25zZVRhcmdldCxcbiAgICAgIGF1dG9GZXRjaDogb3B0aW9uc18uYXV0b0ZldGNoIHx8IHRoaXMuX29wdGlvbnMuYXV0b0ZldGNoLFxuICAgICAgbWF4RmV0Y2g6IG9wdGlvbnNfLm1heEZldGNoIHx8IHRoaXMuX29wdGlvbnMubWF4RmV0Y2gsXG4gICAgICBzY2FuQWxsOiBvcHRpb25zXy5zY2FuQWxsIHx8IHRoaXMuX29wdGlvbnMuc2NhbkFsbCxcbiAgICB9O1xuXG4gICAgLy8gY29sbGVjdCBmZXRjaGVkIHJlY29yZHMgaW4gYXJyYXlcbiAgICAvLyBvbmx5IHdoZW4gcmVzcG9uc2UgdGFyZ2V0IGlzIFJlY29yZHMgYW5kXG4gICAgLy8gZWl0aGVyIGNhbGxiYWNrIG9yIGNoYWluaW5nIHByb21pc2VzIGFyZSBhdmFpbGFibGUgdG8gdGhpcyBxdWVyeS5cbiAgICB0aGlzLm9uY2UoJ2ZldGNoJywgKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBvcHRpb25zLnJlc3BvbnNlVGFyZ2V0ID09PSBSZXNwb25zZVRhcmdldHMuUmVjb3JkcyAmJlxuICAgICAgICB0aGlzLl9jaGFpbmluZ1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnLS0tIGNvbGxlY3RpbmcgYWxsIGZldGNoZWQgcmVjb3JkcyAtLS0nKTtcbiAgICAgICAgY29uc3QgcmVjb3JkczogUmVjb3JkW10gPSBbXTtcbiAgICAgICAgY29uc3Qgb25SZWNvcmQgPSAocmVjb3JkOiBSZWNvcmQpID0+IHJlY29yZHMucHVzaChyZWNvcmQpO1xuICAgICAgICB0aGlzLm9uKCdyZWNvcmQnLCBvblJlY29yZCk7XG4gICAgICAgIHRoaXMub25jZSgnZW5kJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3JlY29yZCcsIG9uUmVjb3JkKTtcbiAgICAgICAgICB0aGlzLmVtaXQoJ3Jlc3BvbnNlJywgcmVjb3JkcywgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmxhZyB0byBwcmV2ZW50IHJlLWV4ZWN1dGlvblxuICAgIHRoaXMuX2V4ZWN1dGVkID0gdHJ1ZTtcblxuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAvLyBzdGFydCBhY3R1YWwgcXVlcnlcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZygnPj4+IFF1ZXJ5IHN0YXJ0ID4+PicpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5fZXhlY3V0ZShvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCcqKiogUXVlcnkgZmluaXNoZWQgKioqJyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLl9sb2dnZXIuZGVidWcoJy0tLSBRdWVyeSBlcnJvciAtLS0nLCBlcnJvcik7XG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIC8vIHJldHVybiBRdWVyeSBpbnN0YW5jZSBmb3IgY2hhaW5pbmdcbiAgICByZXR1cm4gKHRoaXMgYXMgUXVlcnk8UywgTiwgUj4pIGFzIFF1ZXJ5PFMsIE4sIFIsIFFSVDE+O1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjZXhlY3V0ZSgpXG4gICAqL1xuICBleGVjID0gdGhpcy5leGVjdXRlO1xuXG4gIC8qKlxuICAgKiBTeW5vbnltIG9mIFF1ZXJ5I2V4ZWN1dGUoKVxuICAgKi9cbiAgcnVuID0gdGhpcy5leGVjdXRlO1xuXG4gIHByaXZhdGUgbG9jYXRvclRvVXJsKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhdG9yXG4gICAgICA/IFt0aGlzLl9jb25uLl9iYXNlVXJsKCksICcvcXVlcnkvJywgdGhpcy5fbG9jYXRvcl0uam9pbignJylcbiAgICAgIDogJyc7XG4gIH1cblxuICBwcml2YXRlIHVybFRvTG9jYXRvcih1cmw6IHN0cmluZykge1xuICAgIHJldHVybiB1cmwuc3BsaXQoJy8nKS5wb3AoKTtcbiAgfVxuXG4gIHByaXZhdGUgY29uc3RydWN0UmVzcG9uc2UoXG4gICAgcmF3RG9uZTogYm9vbGVhbixcbiAgICByZXNwb25zZVRhcmdldDogUXVlcnlSZXNwb25zZVRhcmdldFszXSxcbiAgKTogbnVtYmVyO1xuICBwcml2YXRlIGNvbnN0cnVjdFJlc3BvbnNlKFxuICAgIHJhd0RvbmU6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFF1ZXJ5UmVzcG9uc2VUYXJnZXRbMl0sXG4gICk6IFI7XG4gIHByaXZhdGUgY29uc3RydWN0UmVzcG9uc2UoXG4gICAgcmF3RG9uZTogYm9vbGVhbixcbiAgICByZXNwb25zZVRhcmdldDogUXVlcnlSZXNwb25zZVRhcmdldFsxXSxcbiAgKTogUltdO1xuICBwcml2YXRlIGNvbnN0cnVjdFJlc3BvbnNlKFxuICAgIHJhd0RvbmU6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFF1ZXJ5UmVzcG9uc2VUYXJnZXRbMF0sXG4gICk6IFF1ZXJ5UmVzdWx0PFI+O1xuICBwcml2YXRlIGNvbnN0cnVjdFJlc3BvbnNlKFxuICAgIHJhd0RvbmU6IGJvb2xlYW4sXG4gICAgcmVzcG9uc2VUYXJnZXQ6IFF1ZXJ5UmVzcG9uc2VUYXJnZXQsXG4gICk6IFF1ZXJ5UmVzdWx0PFI+IHwgUltdIHwgbnVtYmVyIHwgUiB7XG4gICAgc3dpdGNoIChyZXNwb25zZVRhcmdldCkge1xuICAgICAgY2FzZSAnQ291bnQnOlxuICAgICAgICByZXR1cm4gdGhpcy50b3RhbFNpemU7XG4gICAgICBjYXNlICdTaW5nbGVSZWNvcmQnOlxuICAgICAgICByZXR1cm4gdGhpcy5yZWNvcmRzPy5bMF0gPz8gbnVsbDtcbiAgICAgIGNhc2UgJ1JlY29yZHMnOlxuICAgICAgICByZXR1cm4gdGhpcy5yZWNvcmRzO1xuICAgICAgLy8gUXVlcnlSZXN1bHQgaXMgZGVmYXVsdCByZXNwb25zZSB0YXJnZXRcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ue1xuICAgICAgICAgICAgcmVjb3JkczogdGhpcy5yZWNvcmRzLFxuICAgICAgICAgICAgdG90YWxTaXplOiB0aGlzLnRvdGFsU2l6ZSxcbiAgICAgICAgICAgIGRvbmU6IHJhd0RvbmUgPz8gdHJ1ZSwgLy8gd2hlbiBubyByZWNvcmRzLCBkb25lIGlzIG9taXR0ZWRcbiAgICAgICAgICB9LFxuICAgICAgICAgIC4uLih0aGlzLl9sb2NhdG9yID8geyBuZXh0UmVjb3Jkc1VybDogdGhpcy5sb2NhdG9yVG9VcmwoKSB9IDoge30pLFxuICAgICAgICB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGFzeW5jIF9leGVjdXRlKG9wdGlvbnM6IFF1ZXJ5T3B0aW9ucyk6IFByb21pc2U8UXVlcnlSZXNwb25zZTxSPj4ge1xuICAgIGNvbnN0IHsgaGVhZGVycywgcmVzcG9uc2VUYXJnZXQsIGF1dG9GZXRjaCwgbWF4RmV0Y2gsIHNjYW5BbGwgfSA9IG9wdGlvbnM7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKCdleGVjdXRlIHdpdGggb3B0aW9ucycsIG9wdGlvbnMpO1xuICAgIGxldCB1cmw7XG4gICAgaWYgKHRoaXMuX2xvY2F0b3IpIHtcbiAgICAgIHVybCA9IHRoaXMubG9jYXRvclRvVXJsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNvcWwgPSBhd2FpdCB0aGlzLnRvU09RTCgpO1xuICAgICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTT1FMID0gJHtzb3FsfWApO1xuICAgICAgdXJsID0gW1xuICAgICAgICB0aGlzLl9jb25uLl9iYXNlVXJsKCksXG4gICAgICAgICcvJyxcbiAgICAgICAgc2NhbkFsbCA/ICdxdWVyeUFsbCcgOiAncXVlcnknLFxuICAgICAgICAnP3E9JyxcbiAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHNvcWwpLFxuICAgICAgXS5qb2luKCcnKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuX2Nvbm4ucmVxdWVzdDxSPih7IG1ldGhvZDogJ0dFVCcsIHVybCwgaGVhZGVycyB9KTtcbiAgICB0aGlzLmVtaXQoJ2ZldGNoJyk7XG4gICAgdGhpcy50b3RhbFNpemUgPSBkYXRhLnRvdGFsU2l6ZTtcbiAgICB0aGlzLnJlY29yZHMgPSB0aGlzLnJlY29yZHM/LmNvbmNhdChcbiAgICAgIG1heEZldGNoIC0gdGhpcy5yZWNvcmRzLmxlbmd0aCA+IGRhdGEucmVjb3Jkcy5sZW5ndGhcbiAgICAgICAgPyBkYXRhLnJlY29yZHNcbiAgICAgICAgOiBkYXRhLnJlY29yZHMuc2xpY2UoMCwgbWF4RmV0Y2ggLSB0aGlzLnJlY29yZHMubGVuZ3RoKSxcbiAgICApO1xuICAgIHRoaXMuX2xvY2F0b3IgPSBkYXRhLm5leHRSZWNvcmRzVXJsXG4gICAgICA/IHRoaXMudXJsVG9Mb2NhdG9yKGRhdGEubmV4dFJlY29yZHNVcmwpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9maW5pc2hlZCA9XG4gICAgICB0aGlzLl9maW5pc2hlZCB8fFxuICAgICAgZGF0YS5kb25lIHx8XG4gICAgICAhYXV0b0ZldGNoIHx8XG4gICAgICB0aGlzLnJlY29yZHMubGVuZ3RoID09PSBtYXhGZXRjaCB8fFxuICAgICAgLy8gdGhpcyBpcyB3aGF0IHRoZSByZXNwb25zZSBsb29rcyBsaWtlIHdoZW4gdGhlcmUgYXJlIG5vIHJlc3VsdHNcbiAgICAgIChkYXRhLnJlY29yZHMubGVuZ3RoID09PSAwICYmIGRhdGEuZG9uZSA9PT0gdW5kZWZpbmVkKTtcblxuICAgIC8vIHN0cmVhbWluZyByZWNvcmQgaW5zdGFuY2VzXG4gICAgY29uc3QgbnVtUmVjb3JkcyA9IGRhdGEucmVjb3Jkcz8ubGVuZ3RoID8/IDA7XG4gICAgbGV0IHRvdGFsRmV0Y2hlZCA9IHRoaXMudG90YWxGZXRjaGVkO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUmVjb3JkczsgaSsrKSB7XG4gICAgICBpZiAodG90YWxGZXRjaGVkID49IG1heEZldGNoKSB7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCByZWNvcmQgPSBkYXRhLnJlY29yZHNbaV07XG4gICAgICB0aGlzLmVtaXQoJ3JlY29yZCcsIHJlY29yZCwgdG90YWxGZXRjaGVkLCB0aGlzKTtcbiAgICAgIHRvdGFsRmV0Y2hlZCArPSAxO1xuICAgIH1cbiAgICB0aGlzLnRvdGFsRmV0Y2hlZCA9IHRvdGFsRmV0Y2hlZDtcblxuICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLmNvbnN0cnVjdFJlc3BvbnNlKGRhdGEuZG9uZSwgcmVzcG9uc2VUYXJnZXQpO1xuICAgICAgLy8gb25seSBmaXJlIHJlc3BvbnNlIGV2ZW50IHdoZW4gaXQgc2hvdWxkIGJlIG5vdGlmaWVkIHBlciBmZXRjaFxuICAgICAgaWYgKHJlc3BvbnNlVGFyZ2V0ICE9PSBSZXNwb25zZVRhcmdldHMuUmVjb3Jkcykge1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc3BvbnNlJywgcmVzcG9uc2UsIHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGUob3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbiByZWFkYWJsZSBzdHJlYW0gaW5zdGFuY2VcbiAgICovXG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyk6IFNlcmlhbGl6YWJsZTxSPjtcbiAgc3RyZWFtKHR5cGU6ICdjc3YnKTogUmVhZGFibGU7XG4gIHN0cmVhbSh0eXBlOiAncmVjb3JkJyB8ICdjc3YnID0gJ2NzdicpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkICYmICF0aGlzLl9leGVjdXRlZCkge1xuICAgICAgdGhpcy5leGVjdXRlKHsgYXV0b0ZldGNoOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSA9PT0gJ3JlY29yZCcgPyB0aGlzLl9zdHJlYW0gOiB0aGlzLl9zdHJlYW0uc3RyZWFtKHR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBpcGUgdGhlIHF1ZXJpZWQgcmVjb3JkcyB0byBhbm90aGVyIHN0cmVhbVxuICAgKiBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBRdWVyeSBpcyBub3QgYSByZWNvcmQgc3RyZWFtIGluc3RhbmNlIGFueW1vcmUgaW4gMi4wLlxuICAgKiBJZiB5b3Ugd2FudCBhIHJlY29yZCBzdHJlYW0gaW5zdGFuY2UsIHVzZSBgUXVlcnkjc3RyZWFtKCdyZWNvcmQnKWAuXG4gICAqL1xuICBwaXBlKHN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyZWFtKCdyZWNvcmQnKS5waXBlKHN0cmVhbSk7XG4gIH1cblxuICAvKipcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgYXN5bmMgX2V4cGFuZEZpZWxkcyhzb2JqZWN0Xz86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0aGlzLl9zb3FsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgZXhwYW5kIGZpZWxkcyBmb3IgdGhlIHF1ZXJ5IHdoaWNoIGhhcyBhbHJlYWR5IGJ1aWx0IFNPUUwuJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHsgZmllbGRzID0gW10sIHRhYmxlID0gJycgfSA9IHRoaXMuX2NvbmZpZztcbiAgICBjb25zdCBzb2JqZWN0ID0gc29iamVjdF8gfHwgdGFibGU7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKFxuICAgICAgYF9leHBhbmRGaWVsZHM6IHNvYmplY3QgPSAke3NvYmplY3R9LCBmaWVsZHMgPSAke2ZpZWxkcy5qb2luKCcsICcpfWAsXG4gICAgKTtcbiAgICBjb25zdCBbZWZpZWxkc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLl9leHBhbmRBc3Rlcmlza0ZpZWxkcyhzb2JqZWN0LCBmaWVsZHMpLFxuICAgICAgLi4udGhpcy5fY2hpbGRyZW4ubWFwKGFzeW5jIChjaGlsZFF1ZXJ5KSA9PiB7XG4gICAgICAgIGF3YWl0IGNoaWxkUXVlcnkuX2V4cGFuZEZpZWxkcygpO1xuICAgICAgICByZXR1cm4gW10gYXMgc3RyaW5nW107XG4gICAgICB9KSxcbiAgICBdKTtcbiAgICB0aGlzLl9jb25maWcuZmllbGRzID0gZWZpZWxkcztcbiAgICB0aGlzLl9jb25maWcuaW5jbHVkZXMgPSB0aGlzLl9jaGlsZHJlblxuICAgICAgLm1hcCgoY3F1ZXJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNjb25maWcgPSBjcXVlcnkuX3F1ZXJ5Ll9jb25maWc7XG4gICAgICAgIHJldHVybiBbY2NvbmZpZy50YWJsZSwgY2NvbmZpZ10gYXMgW3N0cmluZywgU09RTFF1ZXJ5Q29uZmlnXTtcbiAgICAgIH0pXG4gICAgICAucmVkdWNlPHsgW25hbWU6IHN0cmluZ106IFNPUUxRdWVyeUNvbmZpZyB9PihcbiAgICAgICAgKGluY2x1ZGVzLCBbY3RhYmxlLCBjY29uZmlnXSkgPT4gKHtcbiAgICAgICAgICAuLi5pbmNsdWRlcyxcbiAgICAgICAgICBbY3RhYmxlXTogY2NvbmZpZyxcbiAgICAgICAgfSksXG4gICAgICAgIHt9LFxuICAgICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgYXN5bmMgX2ZpbmRSZWxhdGlvbk9iamVjdChyZWxOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fY29uZmlnLnRhYmxlO1xuICAgIGlmICghdGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdGFibGUgaW5mb3JtYXRpb24gcHJvdmlkZWQgaW4gdGhlIHF1ZXJ5Jyk7XG4gICAgfVxuICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyhcbiAgICAgIGBmaW5kaW5nIHRhYmxlIGZvciByZWxhdGlvbiBcIiR7cmVsTmFtZX1cIiBpbiBcIiR7dGFibGV9XCIuLi5gLFxuICAgICk7XG4gICAgY29uc3Qgc29iamVjdCA9IGF3YWl0IHRoaXMuX2Nvbm4uZGVzY3JpYmUkKHRhYmxlKTtcbiAgICBjb25zdCB1cHBlclJuYW1lID0gcmVsTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIGZvciAoY29uc3QgY3Igb2Ygc29iamVjdC5jaGlsZFJlbGF0aW9uc2hpcHMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKGNyLnJlbGF0aW9uc2hpcE5hbWUgfHwgJycpLnRvVXBwZXJDYXNlKCkgPT09IHVwcGVyUm5hbWUgJiZcbiAgICAgICAgY3IuY2hpbGRTT2JqZWN0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGNyLmNoaWxkU09iamVjdDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBjaGlsZCByZWxhdGlvbnNoaXAgZm91bmQ6ICR7cmVsTmFtZX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgYXN5bmMgX2V4cGFuZEFzdGVyaXNrRmllbGRzKFxuICAgIHNvYmplY3Q6IHN0cmluZyxcbiAgICBmaWVsZHM6IHN0cmluZ1tdLFxuICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgY29uc3QgZXhwYW5kZWRGaWVsZHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGZpZWxkcy5tYXAoYXN5bmMgKGZpZWxkKSA9PiB0aGlzLl9leHBhbmRBc3Rlcmlza0ZpZWxkKHNvYmplY3QsIGZpZWxkKSksXG4gICAgKTtcbiAgICByZXR1cm4gZXhwYW5kZWRGaWVsZHMucmVkdWNlKFxuICAgICAgKGVmbGRzOiBzdHJpbmdbXSwgZmxkczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiBbLi4uZWZsZHMsIC4uLmZsZHNdLFxuICAgICAgW10sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgYXN5bmMgX2V4cGFuZEFzdGVyaXNrRmllbGQoXG4gICAgc29iamVjdDogc3RyaW5nLFxuICAgIGZpZWxkOiBzdHJpbmcsXG4gICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICB0aGlzLl9sb2dnZXIuZGVidWcoYGV4cGFuZGluZyBmaWVsZCBcIiR7ZmllbGR9XCIgaW4gXCIke3NvYmplY3R9XCIuLi5gKTtcbiAgICBjb25zdCBmcGF0aCA9IGZpZWxkLnNwbGl0KCcuJyk7XG4gICAgaWYgKGZwYXRoW2ZwYXRoLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICAgIGNvbnN0IHNvID0gYXdhaXQgdGhpcy5fY29ubi5kZXNjcmliZSQoc29iamVjdCk7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoYHRhYmxlICR7c29iamVjdH0gaGFzIGJlZW4gZGVzY3JpYmVkYCk7XG4gICAgICBpZiAoZnBhdGgubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBybmFtZSA9IGZwYXRoLnNoaWZ0KCk7XG4gICAgICAgIGZvciAoY29uc3QgZiBvZiBzby5maWVsZHMpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBmLnJlbGF0aW9uc2hpcE5hbWUgJiZcbiAgICAgICAgICAgIHJuYW1lICYmXG4gICAgICAgICAgICBmLnJlbGF0aW9uc2hpcE5hbWUudG9VcHBlckNhc2UoKSA9PT0gcm5hbWUudG9VcHBlckNhc2UoKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgcmZpZWxkID0gZjtcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZVRvID0gcmZpZWxkLnJlZmVyZW5jZVRvIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgcnRhYmxlID0gcmVmZXJlbmNlVG8ubGVuZ3RoID09PSAxID8gcmVmZXJlbmNlVG9bMF0gOiAnTmFtZSc7XG4gICAgICAgICAgICBjb25zdCBmcGF0aHMgPSBhd2FpdCB0aGlzLl9leHBhbmRBc3Rlcmlza0ZpZWxkKFxuICAgICAgICAgICAgICBydGFibGUsXG4gICAgICAgICAgICAgIGZwYXRoLmpvaW4oJy4nKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gZnBhdGhzLm1hcCgoZnApID0+IGAke3JuYW1lfS4ke2ZwfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gc28uZmllbGRzLm1hcCgoZikgPT4gZi5uYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIFtmaWVsZF07XG4gIH1cblxuICAvKipcbiAgICogRXhwbGFpbiBwbGFuIGZvciBleGVjdXRpbmcgcXVlcnlcbiAgICovXG4gIGFzeW5jIGV4cGxhaW4oKSB7XG4gICAgY29uc3Qgc29xbCA9IGF3YWl0IHRoaXMudG9TT1FMKCk7XG4gICAgdGhpcy5fbG9nZ2VyLmRlYnVnKGBTT1FMID0gJHtzb3FsfWApO1xuICAgIGNvbnN0IHVybCA9IGAvcXVlcnkvP2V4cGxhaW49JHtlbmNvZGVVUklDb21wb25lbnQoc29xbCl9YDtcbiAgICByZXR1cm4gdGhpcy5fY29ubi5yZXF1ZXN0PFF1ZXJ5RXhwbGFpblJlc3VsdD4odXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gU09RTCBleHByZXNzaW9uIGZvciB0aGUgcXVlcnlcbiAgICovXG4gIGFzeW5jIHRvU09RTCgpIHtcbiAgICBpZiAodGhpcy5fc29xbCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NvcWw7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMuX2V4cGFuZEZpZWxkcygpO1xuICAgIHJldHVybiBjcmVhdGVTT1FMKHRoaXMuX2NvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogUHJvbWlzZS9BKyBpbnRlcmZhY2VcbiAgICogaHR0cDovL3Byb21pc2VzLWFwbHVzLmdpdGh1Yi5pby9wcm9taXNlcy1zcGVjL1xuICAgKlxuICAgKiBEZWxlZ2F0ZSB0byBkZWZlcnJlZCBwcm9taXNlLCByZXR1cm4gcHJvbWlzZSBpbnN0YW5jZSBmb3IgcXVlcnkgcmVzdWx0XG4gICAqL1xuICB0aGVuPFUsIFY+KFxuICAgIG9uUmVzb2x2ZT86XG4gICAgICB8ICgocXI6IFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPikgPT4gVSB8IFByb21pc2U8VT4pXG4gICAgICB8IG51bGxcbiAgICAgIHwgdW5kZWZpbmVkLFxuICAgIG9uUmVqZWN0PzogKChlcnI6IEVycm9yKSA9PiBWIHwgUHJvbWlzZTxWPikgfCBudWxsIHwgdW5kZWZpbmVkLFxuICApOiBQcm9taXNlPFUgfCBWPiB7XG4gICAgdGhpcy5fY2hhaW5pbmcgPSB0cnVlO1xuICAgIGlmICghdGhpcy5fZmluaXNoZWQgJiYgIXRoaXMuX2V4ZWN1dGVkKSB7XG4gICAgICB0aGlzLmV4ZWN1dGUoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9wcm9taXNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdpbnZhbGlkIHN0YXRlOiBwcm9taXNlIGlzIG5vdCBzZXQgYWZ0ZXIgcXVlcnkgZXhlY3V0aW9uJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcm9taXNlLnRoZW4ob25SZXNvbHZlLCBvblJlamVjdCk7XG4gIH1cblxuICBjYXRjaChcbiAgICBvblJlamVjdDogKFxuICAgICAgZXJyOiBFcnJvcixcbiAgICApID0+IFF1ZXJ5UmVzcG9uc2U8UiwgUVJUPiB8IFByb21pc2U8UXVlcnlSZXNwb25zZTxSLCBRUlQ+PixcbiAgKTogUHJvbWlzZTxRdWVyeVJlc3BvbnNlPFIsIFFSVD4+IHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIHByb21pc2UoKTogUHJvbWlzZTxRdWVyeVJlc3BvbnNlPFIsIFFSVD4+IHtcbiAgICAvLyBUT0RPKGNyaXN0aWFuKTogdmVyaWZ5IHRoaXMgaXMgY29ycmVjdFxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKHRoaXMgYXMgdW5rbm93bikgYXMgUXVlcnlSZXNwb25zZTxSLCBRUlQ+KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWxrIGRlbGV0ZSBxdWVyaWVkIHJlY29yZHNcbiAgICovXG4gIGRlc3Ryb3kob3B0aW9ucz86IFF1ZXJ5RGVzdHJveU9wdGlvbnMpOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIGRlc3Ryb3kodHlwZTogTiwgb3B0aW9ucz86IFF1ZXJ5RGVzdHJveU9wdGlvbnMpOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIGRlc3Ryb3kodHlwZT86IE4gfCBRdWVyeURlc3Ryb3lPcHRpb25zLCBvcHRpb25zPzogUXVlcnlEZXN0cm95T3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHR5cGU7XG4gICAgICB0eXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCB0eXBlXzogT3B0aW9uYWw8Tj4gPSB0eXBlIHx8ICh0aGlzLl9jb25maWcudGFibGUgYXMgT3B0aW9uYWw8Tj4pO1xuICAgIGlmICghdHlwZV8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1NPUUwgYmFzZWQgcXVlcnkgbmVlZHMgU09iamVjdCB0eXBlIGluZm9ybWF0aW9uIHRvIGJ1bGsgZGVsZXRlLicsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBTZXQgdGhlIHRocmVzaG9sZCBudW1iZXIgdG8gcGFzcyB0byBidWxrIEFQSVxuICAgIGNvbnN0IHRocmVzaG9sZE51bSA9XG4gICAgICBvcHRpb25zLmFsbG93QnVsayA9PT0gZmFsc2VcbiAgICAgICAgPyAtMVxuICAgICAgICA6IHR5cGVvZiBvcHRpb25zLmJ1bGtUaHJlc2hvbGQgPT09ICdudW1iZXInXG4gICAgICAgID8gb3B0aW9ucy5idWxrVGhyZXNob2xkXG4gICAgICAgIDogLy8gZGV0ZXJtaW5lIHRocmVzaG9sZCBpZiB0aGUgY29ubmVjdGlvbiB2ZXJzaW9uIHN1cHBvcnRzIFNPYmplY3QgY29sbGVjdGlvbiBBUEkgb3Igbm90XG4gICAgICAgIHRoaXMuX2Nvbm4uX2Vuc3VyZVZlcnNpb24oNDIpXG4gICAgICAgID8gREVGQVVMVF9CVUxLX1RIUkVTSE9MRFxuICAgICAgICA6IHRoaXMuX2Nvbm4uX21heFJlcXVlc3QgLyAyO1xuXG4gICAgY29uc3QgYnVsa0FwaVZlcnNpb24gPSBvcHRpb25zLmJ1bGtBcGlWZXJzaW9uID8/IERFRkFVTFRfQlVMS19BUElfVkVSU0lPTjtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVCYXRjaCA9ICgpID0+XG4gICAgICAgIHRoaXMuX2Nvbm5cbiAgICAgICAgICAuc29iamVjdCh0eXBlXylcbiAgICAgICAgICAuZGVsZXRlQnVsaygpXG4gICAgICAgICAgLm9uKCdyZXNwb25zZScsIHJlc29sdmUpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICBsZXQgcmVjb3JkczogUmVjb3JkW10gPSBbXTtcbiAgICAgIGxldCBiYXRjaDogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlQmF0Y2g+IHwgbnVsbCA9IG51bGw7XG4gICAgICBjb25zdCBoYW5kbGVSZWNvcmQgPSAocmVjOiBSZWNvcmQpID0+IHtcbiAgICAgICAgaWYgKCFyZWMuSWQpIHtcbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnUXVlcmllZCByZWNvcmQgZG9lcyBub3QgaW5jbHVkZSBTYWxlc2ZvcmNlIHJlY29yZCBJRC4nLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlY29yZDogUmVjb3JkID0geyBJZDogcmVjLklkIH07XG4gICAgICAgIGlmIChiYXRjaCkge1xuICAgICAgICAgIGJhdGNoLndyaXRlKHJlY29yZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjb3Jkcy5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhyZXNob2xkTnVtID49IDAgJiZcbiAgICAgICAgICAgIHJlY29yZHMubGVuZ3RoID4gdGhyZXNob2xkTnVtICYmXG4gICAgICAgICAgICBidWxrQXBpVmVyc2lvbiA9PT0gMVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gVXNlIGJ1bGsgZGVsZXRlIGluc3RlYWQgb2YgU09iamVjdCBSRVNUIEFQSVxuICAgICAgICAgICAgYmF0Y2ggPSBjcmVhdGVCYXRjaCgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuICAgICAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVjb3JkcyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGhhbmRsZUVuZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoKSB7XG4gICAgICAgICAgYmF0Y2guZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaWRzID0gcmVjb3Jkcy5tYXAoKHJlY29yZCkgPT4gcmVjb3JkLklkIGFzIHN0cmluZyk7XG4gICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoID4gdGhyZXNob2xkTnVtICYmIGJ1bGtBcGlWZXJzaW9uID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb25uLmJ1bGsyXG4gICAgICAgICAgICAgIC5sb2FkQW5kV2FpdEZvclJlc3VsdHMoe1xuICAgICAgICAgICAgICAgIG9iamVjdDogdHlwZV8sXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgICBpbnB1dDogcmVjb3JkcyxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgKGFsbFJlc3VsdHMpID0+XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMubWFwQnVsa1YyUmVzdWx0c1RvU2F2ZVJlc3VsdHMoYWxsUmVzdWx0cykpLFxuICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29ublxuICAgICAgICAgICAgICAuc29iamVjdCh0eXBlXylcbiAgICAgICAgICAgICAgLmRlc3Ryb3koaWRzLCB7IGFsbG93UmVjdXJzaXZlOiB0cnVlIH0pXG4gICAgICAgICAgICAgIC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5zdHJlYW0oJ3JlY29yZCcpXG4gICAgICAgIC5vbignZGF0YScsIGhhbmRsZVJlY29yZClcbiAgICAgICAgLm9uKCdlbmQnLCBoYW5kbGVFbmQpXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjZGVzdHJveSgpXG4gICAqL1xuICBkZWxldGUgPSB0aGlzLmRlc3Ryb3k7XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgUXVlcnkjZGVzdHJveSgpXG4gICAqL1xuICBkZWwgPSB0aGlzLmRlc3Ryb3k7XG5cbiAgLyoqXG4gICAqIEJ1bGsgdXBkYXRlIHF1ZXJpZWQgcmVjb3JkcywgdXNpbmcgZ2l2ZW4gbWFwcGluZyBmdW5jdGlvbi9vYmplY3RcbiAgICovXG4gIHVwZGF0ZTxVUiBleHRlbmRzIFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPj4oXG4gICAgbWFwcGluZzogKChyZWM6IFIpID0+IFVSKSB8IFVSLFxuICAgIHR5cGU6IE4sXG4gICAgb3B0aW9ucz86IFF1ZXJ5VXBkYXRlT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxTYXZlUmVzdWx0W10+O1xuICB1cGRhdGU8VVIgZXh0ZW5kcyBTT2JqZWN0SW5wdXRSZWNvcmQ8UywgTj4+KFxuICAgIG1hcHBpbmc6ICgocmVjOiBSKSA9PiBVUikgfCBVUixcbiAgICBvcHRpb25zPzogUXVlcnlVcGRhdGVPcHRpb25zLFxuICApOiBQcm9taXNlPFNhdmVSZXN1bHRbXT47XG4gIHVwZGF0ZTxVUiBleHRlbmRzIFNPYmplY3RJbnB1dFJlY29yZDxTLCBOPj4oXG4gICAgbWFwcGluZzogKChyZWM6IFIpID0+IFVSKSB8IFVSLFxuICAgIHR5cGU/OiBOIHwgUXVlcnlVcGRhdGVPcHRpb25zLFxuICAgIG9wdGlvbnM/OiBRdWVyeVVwZGF0ZU9wdGlvbnMsXG4gICkge1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHR5cGU7XG4gICAgICB0eXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCB0eXBlXzogT3B0aW9uYWw8Tj4gPVxuICAgICAgdHlwZSB8fCAodGhpcy5fY29uZmlnICYmICh0aGlzLl9jb25maWcudGFibGUgYXMgT3B0aW9uYWw8Tj4pKTtcbiAgICBpZiAoIXR5cGVfKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdTT1FMIGJhc2VkIHF1ZXJ5IG5lZWRzIFNPYmplY3QgdHlwZSBpbmZvcm1hdGlvbiB0byBidWxrIHVwZGF0ZS4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdXBkYXRlU3RyZWFtID1cbiAgICAgIHR5cGVvZiBtYXBwaW5nID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gUmVjb3JkU3RyZWFtLm1hcChtYXBwaW5nKVxuICAgICAgICA6IFJlY29yZFN0cmVhbS5yZWNvcmRNYXBTdHJlYW0obWFwcGluZyk7XG4gICAgLy8gU2V0IHRoZSB0aHJlc2hvbGQgbnVtYmVyIHRvIHBhc3MgdG8gYnVsayBBUElcbiAgICBjb25zdCB0aHJlc2hvbGROdW0gPVxuICAgICAgb3B0aW9ucy5hbGxvd0J1bGsgPT09IGZhbHNlXG4gICAgICAgID8gLTFcbiAgICAgICAgOiB0eXBlb2Ygb3B0aW9ucy5idWxrVGhyZXNob2xkID09PSAnbnVtYmVyJ1xuICAgICAgICA/IG9wdGlvbnMuYnVsa1RocmVzaG9sZFxuICAgICAgICA6IC8vIGRldGVybWluZSB0aHJlc2hvbGQgaWYgdGhlIGNvbm5lY3Rpb24gdmVyc2lvbiBzdXBwb3J0cyBTT2JqZWN0IGNvbGxlY3Rpb24gQVBJIG9yIG5vdFxuICAgICAgICB0aGlzLl9jb25uLl9lbnN1cmVWZXJzaW9uKDQyKVxuICAgICAgICA/IERFRkFVTFRfQlVMS19USFJFU0hPTERcbiAgICAgICAgOiB0aGlzLl9jb25uLl9tYXhSZXF1ZXN0IC8gMjtcbiAgICBjb25zdCBidWxrQXBpVmVyc2lvbiA9IG9wdGlvbnMuYnVsa0FwaVZlcnNpb24gPz8gREVGQVVMVF9CVUxLX0FQSV9WRVJTSU9OO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVCYXRjaCA9ICgpID0+XG4gICAgICAgIHRoaXMuX2Nvbm5cbiAgICAgICAgICAuc29iamVjdCh0eXBlXylcbiAgICAgICAgICAudXBkYXRlQnVsaygpXG4gICAgICAgICAgLm9uKCdyZXNwb25zZScsIHJlc29sdmUpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgICBsZXQgcmVjb3JkczogQXJyYXk8U09iamVjdFVwZGF0ZVJlY29yZDxTLCBOPj4gPSBbXTtcbiAgICAgIGxldCBiYXRjaDogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlQmF0Y2g+IHwgbnVsbCA9IG51bGw7XG4gICAgICBjb25zdCBoYW5kbGVSZWNvcmQgPSAocmVjb3JkOiBSZWNvcmQpID0+IHtcbiAgICAgICAgaWYgKGJhdGNoKSB7XG4gICAgICAgICAgYmF0Y2gud3JpdGUocmVjb3JkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWNvcmRzLnB1c2gocmVjb3JkIGFzIFNPYmplY3RVcGRhdGVSZWNvcmQ8UywgTj4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aHJlc2hvbGROdW0gPj0gMCAmJlxuICAgICAgICAgIHJlY29yZHMubGVuZ3RoID4gdGhyZXNob2xkTnVtICYmXG4gICAgICAgICAgYnVsa0FwaVZlcnNpb24gPT09IDFcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gVXNlIGJ1bGsgdXBkYXRlIGluc3RlYWQgb2YgU09iamVjdCBSRVNUIEFQSVxuICAgICAgICAgIGJhdGNoID0gY3JlYXRlQmF0Y2goKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiByZWNvcmRzKSB7XG4gICAgICAgICAgICBiYXRjaC53cml0ZShyZWNvcmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWNvcmRzID0gW107XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBoYW5kbGVFbmQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChiYXRjaCkge1xuICAgICAgICAgIGJhdGNoLmVuZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZWNvcmRzLmxlbmd0aCA+IHRocmVzaG9sZE51bSAmJiBidWxrQXBpVmVyc2lvbiA9PT0gMikge1xuICAgICAgICAgICAgdGhpcy5fY29ubi5idWxrMlxuICAgICAgICAgICAgICAubG9hZEFuZFdhaXRGb3JSZXN1bHRzKHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHR5cGVfLFxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbjogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHJlY29yZHMsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgIChhbGxSZXN1bHRzKSA9PlxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLm1hcEJ1bGtWMlJlc3VsdHNUb1NhdmVSZXN1bHRzKGFsbFJlc3VsdHMpKSxcbiAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5cbiAgICAgICAgICAgICAgLnNvYmplY3QodHlwZV8pXG4gICAgICAgICAgICAgIC51cGRhdGUocmVjb3JkcywgeyBhbGxvd1JlY3Vyc2l2ZTogdHJ1ZSB9KVxuICAgICAgICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuc3RyZWFtKCdyZWNvcmQnKVxuICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgICAucGlwZSh1cGRhdGVTdHJlYW0pXG4gICAgICAgIC5vbignZGF0YScsIGhhbmRsZVJlY29yZClcbiAgICAgICAgLm9uKCdlbmQnLCBoYW5kbGVFbmQpXG4gICAgICAgIC5vbignZXJyb3InLCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXBCdWxrVjJSZXN1bHRzVG9TYXZlUmVzdWx0cyhcbiAgICBidWxrSm9iQWxsUmVzdWx0czogSW5nZXN0Sm9iVjJSZXN1bHRzPFM+LFxuICApOiBTYXZlUmVzdWx0W10ge1xuICAgIGNvbnN0IHN1Y2Nlc3NTYXZlUmVzdWx0czogU2F2ZVJlc3VsdFtdID0gYnVsa0pvYkFsbFJlc3VsdHMuc3VjY2Vzc2Z1bFJlc3VsdHMubWFwKFxuICAgICAgKHIpID0+IHtcbiAgICAgICAgY29uc3Qgc2F2ZVJlc3VsdDogU2F2ZVJlc3VsdCA9IHtcbiAgICAgICAgICBpZDogci5zZl9fSWQsXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2F2ZVJlc3VsdDtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIGNvbnN0IGZhaWxlZFNhdmVSZXN1bHRzID0gYnVsa0pvYkFsbFJlc3VsdHMuZmFpbGVkUmVzdWx0cy5tYXAoKHIpID0+IHtcbiAgICAgIGNvbnN0IHNhdmVSZXN1bHQ6IFNhdmVSZXN1bHQgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvckNvZGU6IHIuc2ZfX0Vycm9yLFxuICAgICAgICAgICAgbWVzc2FnZTogci5zZl9fRXJyb3IsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gc2F2ZVJlc3VsdDtcbiAgICB9KTtcblxuICAgIHJldHVybiBbLi4uc3VjY2Vzc1NhdmVSZXN1bHRzLCAuLi5mYWlsZWRTYXZlUmVzdWx0c107XG4gIH1cbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbi8qKlxuICogU3ViUXVlcnkgb2JqZWN0IGZvciByZXByZXNlbnRpbmcgY2hpbGQgcmVsYXRpb25zaGlwIHF1ZXJ5XG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJRdWVyeTxcbiAgUyBleHRlbmRzIFNjaGVtYSxcbiAgUE4gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4sXG4gIFBSIGV4dGVuZHMgUmVjb3JkLFxuICBQUVJUIGV4dGVuZHMgUXVlcnlSZXNwb25zZVRhcmdldCxcbiAgQ1JOIGV4dGVuZHMgQ2hpbGRSZWxhdGlvbnNoaXBOYW1lczxTLCBQTj4gPSBDaGlsZFJlbGF0aW9uc2hpcE5hbWVzPFMsIFBOPixcbiAgQ04gZXh0ZW5kcyBTT2JqZWN0TmFtZXM8Uz4gPSBDaGlsZFJlbGF0aW9uc2hpcFNPYmplY3ROYW1lPFMsIFBOLCBDUk4+LFxuICBDUiBleHRlbmRzIFJlY29yZCA9IFJlY29yZFxuPiB7XG4gIF9yZWxOYW1lOiBDUk47XG4gIF9xdWVyeTogUXVlcnk8UywgQ04sIENSPjtcbiAgX3BhcmVudDogUXVlcnk8UywgUE4sIFBSLCBQUVJUPjtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbm46IENvbm5lY3Rpb248Uz4sXG4gICAgcmVsTmFtZTogQ1JOLFxuICAgIGNvbmZpZzogUXVlcnlDb25maWc8UywgQ04+LFxuICAgIHBhcmVudDogUXVlcnk8UywgUE4sIFBSLCBQUVJUPixcbiAgKSB7XG4gICAgdGhpcy5fcmVsTmFtZSA9IHJlbE5hbWU7XG4gICAgdGhpcy5fcXVlcnkgPSBuZXcgUXVlcnkoY29ubiwgY29uZmlnKTtcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHNlbGVjdDxcbiAgICBSIGV4dGVuZHMgUmVjb3JkID0gUmVjb3JkLFxuICAgIEZQIGV4dGVuZHMgRmllbGRQYXRoU3BlY2lmaWVyPFMsIENOPiA9IEZpZWxkUGF0aFNwZWNpZmllcjxTLCBDTj4sXG4gICAgRlBDIGV4dGVuZHMgRmllbGRQcm9qZWN0aW9uQ29uZmlnID0gRmllbGRQYXRoU2NvcGVkUHJvamVjdGlvbjxTLCBDTiwgRlA+XG4gID4oXG4gICAgZmllbGRzOiBRdWVyeUZpZWxkPFMsIENOLCBGUD4sXG4gICk6IFN1YlF1ZXJ5PFMsIFBOLCBQUiwgUFFSVCwgQ1JOLCBDTiwgU09iamVjdFJlY29yZDxTLCBDTiwgRlBDLCBSPj4ge1xuICAgIC8vIGZvcmNlIGNvbnZlcnQgcXVlcnkgcmVjb3JkIHR5cGUgd2l0aG91dCBjaGFuZ2luZyBpbnN0YW5jZVxuICAgIHRoaXMuX3F1ZXJ5ID0gdGhpcy5fcXVlcnkuc2VsZWN0KGZpZWxkcykgYXMgYW55O1xuICAgIHJldHVybiAodGhpcyBhcyBhbnkpIGFzIFN1YlF1ZXJ5PFxuICAgICAgUyxcbiAgICAgIFBOLFxuICAgICAgUFIsXG4gICAgICBQUVJULFxuICAgICAgQ1JOLFxuICAgICAgQ04sXG4gICAgICBTT2JqZWN0UmVjb3JkPFMsIENOLCBGUEMsIFI+XG4gICAgPjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgd2hlcmUoY29uZGl0aW9uczogUXVlcnlDb25kaXRpb248UywgQ04+IHwgc3RyaW5nKTogdGhpcyB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS53aGVyZShjb25kaXRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW1pdCB0aGUgcmV0dXJuaW5nIHJlc3VsdFxuICAgKi9cbiAgbGltaXQobGltaXQ6IG51bWJlcikge1xuICAgIHRoaXMuX3F1ZXJ5ID0gdGhpcy5fcXVlcnkubGltaXQobGltaXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNraXAgcmVjb3Jkc1xuICAgKi9cbiAgc2tpcChvZmZzZXQ6IG51bWJlcikge1xuICAgIHRoaXMuX3F1ZXJ5ID0gdGhpcy5fcXVlcnkuc2tpcChvZmZzZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN5bm9ueW0gb2YgU3ViUXVlcnkjc2tpcCgpXG4gICAqL1xuICBvZmZzZXQgPSB0aGlzLnNraXA7XG5cbiAgLyoqXG4gICAqIFNldCBxdWVyeSBzb3J0IHdpdGggZGlyZWN0aW9uXG4gICAqL1xuICBzb3J0KHNvcnQ6IFF1ZXJ5U29ydDxTLCBDTj4pOiB0aGlzO1xuICBzb3J0KHNvcnQ6IHN0cmluZ3wgU09iamVjdEZpZWxkTmFtZXM8UywgQ04+LCBkaXI6IFNvcnREaXIpOiB0aGlzO1xuICBzb3J0KFxuICAgIHNvcnQ6IFF1ZXJ5U29ydDxTLCBDTj4gfCBTT2JqZWN0RmllbGROYW1lczxTLCBDTj4gfCBzdHJpbmcsXG4gICAgZGlyPzogU29ydERpcixcbiAgKSB7XG4gICAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeS5zb3J0KHNvcnQgYXMgYW55LCBkaXIgYXMgU29ydERpcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU3lub255bSBvZiBTdWJRdWVyeSNzb3J0KClcbiAgICovXG4gIG9yZGVyYnk6IHR5cGVvZiBTdWJRdWVyeS5wcm90b3R5cGUuc29ydCA9IHRoaXMuc29ydDtcblxuICAvKipcbiAgICpcbiAgICovXG4gIGFzeW5jIF9leHBhbmRGaWVsZHMoKSB7XG4gICAgY29uc3Qgc29iamVjdCA9IGF3YWl0IHRoaXMuX3BhcmVudC5fZmluZFJlbGF0aW9uT2JqZWN0KHRoaXMuX3JlbE5hbWUpO1xuICAgIHJldHVybiB0aGlzLl9xdWVyeS5fZXhwYW5kRmllbGRzKHNvYmplY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhY2sgdGhlIGNvbnRleHQgdG8gcGFyZW50IHF1ZXJ5IG9iamVjdFxuICAgKi9cbiAgZW5kPFxuICAgIENSUCBleHRlbmRzIFNPYmplY3RDaGlsZFJlbGF0aW9uc2hpcFByb3A8XG4gICAgICBDUk4sXG4gICAgICBDUlxuICAgID4gPSBTT2JqZWN0Q2hpbGRSZWxhdGlvbnNoaXBQcm9wPENSTiwgQ1I+LFxuICAgIFBSMSBleHRlbmRzIFJlY29yZCA9IFBSICYgQ1JQXG4gID4oKTogUXVlcnk8UywgUE4sIFBSMSwgUFFSVD4ge1xuICAgIHJldHVybiAodGhpcy5fcGFyZW50IGFzIGFueSkgYXMgUXVlcnk8UywgUE4sIFBSMSwgUFFSVD47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUXVlcnk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFlBQVksUUFBUSxRQUFRO0FBQ3JDLFNBQWlCQyxTQUFTLFFBQVEsZUFBZTtBQUNqRCxP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